<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot 2.7新特性：@JsonMixin使用</title>
      <link href="/post/1671105012841.html"/>
      <url>/post/1671105012841.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>Java类在第三方库中，无法修改</li><li>不想修改已有的类的代码，因当前业务和已有业务在不同的模块中。</li></ul><p>Jackson为我们mixin来解决这个问题，在不修改已有的Java类库的情况下，定制Json的输出。Spring Boot 2.7为我们提供了“@JsonMixin”注解来快速注册mixin。</p><p>输出的实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">User</span><span class="params">(String username,String password)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8080/get">http://localhost:8080/get</a></p><p><img src="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671106422.png" alt="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671106422.png"></p><h2 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h2><p>如果要隐藏属性只需要在字段上添加<code>@JsonIgnore</code>注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">User</span><span class="params">(String username,@JsonIgnore String password)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>接口输出</p><p><img src="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671106538.png" alt="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671106538.png"></p><p>如果是第三方库的类，则可以使用<code>@JsomMixin(User.class)</code>注解来指定某个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">record</span> <span class="title class_">User</span><span class="params">(String username,String password)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonMixin(User.class)</span></span><br><span class="line"><span class="keyword">record</span> <span class="title class_">UserMixin</span><span class="params">(@JsonIgnore String password)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671106538.png" alt="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671106538.png"></p><p>一样可以达到效果</p><h2 id="修改返回的参数名"><a href="#修改返回的参数名" class="headerlink" title="修改返回的参数名"></a>修改返回的参数名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">record</span> <span class="title class_">User</span><span class="params">(String username,String password)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonMixin(User.class)</span></span><br><span class="line"><span class="keyword">record</span> <span class="title class_">UserMixin</span><span class="params">(@JsonIgnore String password,@JsonProperty(&quot;newUsername&quot;)</span> String username)&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671107011.png" alt="/img/Spring%20Boot%202.7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A@JsonMixin%E4%BD%BF%E7%94%A8/1671107011.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot获取所有API接口</title>
      <link href="/post/1670475949349.html"/>
      <url>/post/1670475949349.html</url>
      
        <content type="html"><![CDATA[<h2 id="获取RequestMappingHandlerMapping"><a href="#获取RequestMappingHandlerMapping" class="headerlink" title="获取RequestMappingHandlerMapping"></a>获取RequestMappingHandlerMapping</h2><p><code>RequestMappingHandlerMapping</code>是在<code>DispatcherServlet</code>的初始化过程中自动加载的，默认会自动加载所有实现<code>HandlerMapping</code>接口的bean，且我们可以通过<code>serOrder</code>来设置优先级，系统默认会加载<code>RequestMappingHandlerMapping</code>、<code>BeanNameUrlHandlerMapping</code>、<code>SimpleUrlHandlerMapping</code> 并且按照顺序使用,所以只要从<code>ApplicationContext</code>获取<code>RequestMappingHandlerMapping</code>就可以获取所有注册到<code>Spring</code>的<code>Api</code></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/all&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;获取全部接口代码&quot;)</span></span><br><span class="line">   <span class="meta">@Permission(&quot;sys:auth:all-code&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Collection&lt;AuthCodeTreeVO&gt; <span class="title function_">getAllAuthCode</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringUtils.getApplicationContext();</span><br><span class="line">       <span class="type">RequestMappingHandlerMapping</span> <span class="variable">handlerMapping</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;requestMappingHandlerMapping&quot;</span>, RequestMappingHandlerMapping.class);</span><br><span class="line">       HashMap&lt;String, AuthCodeTreeVO&gt; stringAuthCodeVOHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">       Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();</span><br><span class="line">       <span class="type">AtomicLong</span> <span class="variable">index</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line">       handlerMethods.forEach((k, v) -&gt; &#123;</span><br><span class="line">           <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> v.getMethod();</span><br><span class="line">           <span class="type">Permission</span> <span class="variable">permission</span> <span class="operator">=</span> AnnotationUtils.get(method, Permission.class);</span><br><span class="line">           <span class="keyword">if</span> (permission != <span class="literal">null</span> &amp;&amp; !permission.ignore() &amp;&amp; StringUtils.hasLength(permission.value())) &#123;</span><br><span class="line">               <span class="comment">// 模块名</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">module</span> <span class="operator">=</span> AnnotationUtils.get(v.getMethod().getDeclaringClass(), Api.class).tags()[<span class="number">0</span>];</span><br><span class="line">               <span class="comment">// 业务名</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> AnnotationUtils.get(method, ApiOperation.class).value();</span><br><span class="line">               <span class="comment">// 树菜单</span></span><br><span class="line">               <span class="type">AuthCodeTreeVO</span> <span class="variable">authCodeVO</span> <span class="operator">=</span> stringAuthCodeVOHashMap</span><br><span class="line">                       .getOrDefault(<span class="keyword">module</span>, <span class="keyword">new</span> <span class="title class_">AuthCodeTreeVO</span>(<span class="keyword">module</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line">               authCodeVO.setId(index.getAndIncrement());</span><br><span class="line">               <span class="type">AuthCodeTreeVO</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthCodeTreeVO</span>();</span><br><span class="line">               vo.setTitle(description);</span><br><span class="line">               vo.setApi(k.getPatternValues().toArray());</span><br><span class="line">               vo.setPermission(permission.value());</span><br><span class="line">               vo.setId(index.getAndIncrement());</span><br><span class="line">               authCodeVO.getChildren().add(vo);</span><br><span class="line">               stringAuthCodeVOHashMap.put(<span class="keyword">module</span>, authCodeVO);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> stringAuthCodeVOHashMap.values();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/img/SpringBoot%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89API%E6%8E%A5%E5%8F%A3/1670475952.png" alt="/img/SpringBoot%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89API%E6%8E%A5%E5%8F%A3/1670475952.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>El-date-picker组件8小时时差问题</title>
      <link href="/post/1670304678490.html"/>
      <url>/post/1670304678490.html</url>
      
        <content type="html"><![CDATA[<h1 id="el-date-picker组件8小时时间差问题"><a href="#el-date-picker组件8小时时间差问题" class="headerlink" title="el-date-picker组件8小时时间差问题"></a>el-date-picker组件8小时时间差问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670304681.png" alt="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670304681.png"></p><p>控制台输出</p><p><img src="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670304721.png" alt="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670304721.png"></p><blockquote><p>可以很明显的看到，时间少了8小时，根本原因是：中国国家标准时间是东经120°（东八区）的地方时间,同格林威治时间（世界时）整整相差8小时</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="后台解决"><a href="#后台解决" class="headerlink" title="后台解决"></a>后台解决</h3><blockquote><p>后台用<code>java.util.Date</code>接收日期</p><p>如果非要用<code>LocalDateTime</code>，前端转成指定格式字符串，后台用<code>@JsonFormat</code>转换</p></blockquote><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p><img src="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670306119.png" alt="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670306119.png"></p><p><img src="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670306168.png" alt="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670306168.png"></p><p><em><strong>也就是说，我们只需要更改 value-format 的格式就可以了</strong></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">   <span class="attr">v-model</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">type</span>=<span class="string">&quot;datetimerange&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">format</span>=<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DDTHH:mm:ss&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span></span></span><br><span class="line"><span class="tag">   @<span class="attr">change</span>=<span class="string">&quot;searchByDate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670306284.png" alt="/img/El-date-picker%E7%BB%84%E4%BB%B68%E5%B0%8F%E6%97%B6%E6%97%B6%E5%B7%AE%E9%97%AE%E9%A2%98/1670306284.png"></p><p>完美解决</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Element-UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring异步任务</title>
      <link href="/post/1670166718359.html"/>
      <url>/post/1670166718359.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring异步任务"><a href="#Spring异步任务" class="headerlink" title="Spring异步任务"></a>Spring异步任务</h1><p>1.在启动类，加入<code>@EnableAsync</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启异步调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在需要使用异步的方法添加 <strong>@Async 注解</strong> 如果有线程池会默认使用，也可以指定（在注解的<code>value</code>输入线程池的<code>bean</code>名字即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Async(&quot;executor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Oplog oplog)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.save(oplog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;executor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Executor <span class="title function_">asyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">processors</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> (<span class="type">int</span>) (processors / <span class="number">0.1</span> * <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//int maximumPoolSize = (1000 - capacity) * (20 / 200);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            processors + <span class="number">1</span>,</span><br><span class="line">            processors * <span class="number">4</span>,</span><br><span class="line">            <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(capacity),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadFactoryBuilder</span>().setNameFormat(<span class="string">&quot;maker-task-%d&quot;</span>).build(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus自动填充字段</title>
      <link href="/post/1670067006004.html"/>
      <url>/post/1670067006004.html</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>有些表中会有更新时间、创建时间、更新人或者创建人这些字段。</p><p>每次对数据进行新增、删除、修改时都需要对这些字段进行设置。传统的做法是在进行这些操作前，对Entity的字段进行set设置，然后再进行操作。这种做法不仅容易忘记导致出错、而且代码会显得特别冗余。</p><p>虽然新增时间和修改时间可以使用数据库的时间，但是新增人和修改人就不能使用这样的功能。</p><p>所以MP就提供自动填充的功能，帮助自定设置这些字段的值，提升开发效率，代码也会显得特别优雅。</p><h1 id="实现MP自动填充"><a href="#实现MP自动填充" class="headerlink" title="实现MP自动填充"></a>实现MP自动填充</h1><p>step1: 在需要更新的实体上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> <span class="keyword">extends</span> <span class="title class_">SuperEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建人ID&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> Long createId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建人&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String createBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = ApiConstants.DATE_MM)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;修改人&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = ApiConstants.DATE_MM)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;修改时间&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 0、否 1、是</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;删除 0:否 1:是&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Step2：实现<code>MetaObjectHandler</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入填充</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject 元对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="type">UserSession</span> <span class="variable">userSession</span> <span class="operator">=</span> UserSession.getLoginInfo();</span><br><span class="line">        <span class="built_in">this</span>.fillHasGetter(metaObject, <span class="string">&quot;createId&quot;</span>, userSession.getId(), <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.fillHasGetter(metaObject, <span class="string">&quot;createBy&quot;</span>, userSession.getUsername(), <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.fillHasGetter(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime.now(), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="type">UserSession</span> <span class="variable">userSession</span> <span class="operator">=</span> UserSession.getLoginInfo();</span><br><span class="line">        <span class="built_in">this</span>.fillHasGetter(metaObject, <span class="string">&quot;updateBy&quot;</span>, userSession.getUsername(), <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.fillHasGetter(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now(), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">fillHasGetter</span><span class="params">(MetaObject metaObject, String fieldName, Object fieldVal, <span class="type">boolean</span> isCover)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (metaObject.hasGetter(fieldName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isCover)</span><br><span class="line">                <span class="built_in">this</span>.setFieldValByName(fieldName, fieldVal, metaObject);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">this</span>.fillStrategy(metaObject, fieldName, fieldVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><code>MetaObjectHandler</code>整个Spring容器只能实现一个</li><li><code>MetaObjectHandler</code>提供的默认方法的策略均为:如果属性有值则不覆盖,如果填充值为null则不填充</li><li>要想根据注解<code>FieldFill.xxx</code>和字段名以及字段类型来区分必须使用父类的<code>strictInsertFill</code>或者<code>strictUpdateFill</code>方法，不需要可以使用父类的<code>fillStrategy</code>方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截修改Ajax响应</title>
      <link href="/post/1669958960931.html"/>
      <url>/post/1669958960931.html</url>
      
        <content type="html"><![CDATA[<h1 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h1><p>XMLHttpRequest 对象用于在后台与服务器交换数据。</p><p>XMLHttpRequest 对象是 <em>开发者的梦想</em> ，因为您能够：</p><ul><li>在不重新加载页面的情况下更新网页</li><li>在页面已加载后从服务器请求数据</li><li>在页面已加载后从服务器接收数据</li><li>在后台向服务器发送数据</li></ul><p>所有现代的浏览器都支持 XMLHttpRequest 对象。</p><blockquote><p>顾名思义：是基于XML的HTTP请求。<a href="https://link.zhihu.com/?target=http://en.wikipedia.org/wiki/XMLHttpRequest">XMLHttpRequest</a>是一个浏览器接口，使得Javascript可以进行HTTP(S)通信。自从浏览器提供有了XMLHTTPRequest这个接口之后，ajax操作就此诞生。</p></blockquote><p>更多关于XMLHttpRequest介绍进点击：<a href="https://www.w3school.com.cn/xmldom/dom_http.asp">XMLHttpRequest详解</a></p><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>AJAX &#x3D; Asynchronous JavaScript and XML，翻译为：异步的 JavaScript 和 XML。ajax就是基于浏览器提供的XMLHttpRequest对象来实现的。</p><p>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。自从有了ajax之后，我们就可以实现异步的加载网页。</p><p>AJAX工作原理：</p><p><img src="/img/%E6%8B%A6%E6%88%AA%E4%BF%AE%E6%94%B9Ajax%E5%93%8D%E5%BA%94/1669960729.png" alt="/img/%E6%8B%A6%E6%88%AA%E4%BF%AE%E6%94%B9Ajax%E5%93%8D%E5%BA%94/1669960729.png"></p><h1 id="修改请求响应"><a href="#修改请求响应" class="headerlink" title="修改请求响应"></a>修改请求响应</h1><p>要修改响应我们可以通过重写<code>XMLHttpRequest.prototype.open</code>并监听<code>readystatechange</code>并且把<code>response</code>和<code>responseText</code>修改为可写入的</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> open_prototype = <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>,</span><br><span class="line">      intercept_response = <span class="keyword">function</span> (<span class="params">urlPattern, callback</span>) &#123;</span><br><span class="line">          <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">              <span class="variable language_">arguments</span>[<span class="string">&#x27;1&#x27;</span>].<span class="title function_">includes</span>(urlPattern) &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;readystatechange&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">                      <span class="keyword">const</span> response = <span class="title function_">callback</span>(event.<span class="property">target</span>.<span class="property">responseText</span>);</span><br><span class="line">                      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&#x27;response&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">                      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&#x27;responseText&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">                      <span class="variable language_">this</span>.<span class="property">response</span> = <span class="variable language_">this</span>.<span class="property">responseText</span> = response;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">return</span> open_prototype.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure><p>然后你可以这样使用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">intercept_response</span>(<span class="string">&#x27;匹配的请求链接&#x27;</span>, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="comment">// 如果要把响应结果里的苹果改成橙子，这样就可以了</span></span><br><span class="line">           <span class="keyword">return</span> response.<span class="title function_">replace</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h2><p>HTTP 请求的状态.当一个 XMLHttpRequest 初次创建时，这个属性的值从 0 开始，直到接收到完整的 HTTP 响应，这个值增加到 4。</p><p>5 个状态中每一个都有一个相关联的非正式的名称，下表列出了状态、名称和含义：</p><table><thead><tr><th>状态</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>Uninitialized</td><td>初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置。</td></tr><tr><td>1</td><td>Open</td><td>open() 方法已调用，但是 send() 方法未调用。请求还没有被发送。</td></tr><tr><td>2</td><td>Sent</td><td>Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应。</td></tr><tr><td>3</td><td>Receiving</td><td>所有响应头部都已经接收到。响应体开始接收但未完成。</td></tr><tr><td>4</td><td>Loaded</td><td>HTTP 响应已经完全接收。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue子模板调用父模板函数</title>
      <link href="/post/1669820714394.html"/>
      <url>/post/1669820714394.html</url>
      
        <content type="html"><![CDATA[<h2 id="父组件把方法传入子组件中"><a href="#父组件把方法传入子组件中" class="headerlink" title="父组件把方法传入子组件中"></a><strong>父组件把方法传入子组件中</strong></h2><p>父模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:fatherMethod</span>=<span class="string">&quot;fatherMethod&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./components/childcomponent&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      child</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">fatherMethod</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父组件方法&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childMethod()&quot;</span>&gt;</span>点击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fatherMethod</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Function</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">childMethod</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">fatherMethod</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlusTest创建&#39;sqlSessionFactory&#39;失败</title>
      <link href="/post/1669731031241.html"/>
      <url>/post/1669731031241.html</url>
      
        <content type="html"><![CDATA[<h2 id="启动报错如下"><a href="#启动报错如下" class="headerlink" title="启动报错如下"></a>启动报错如下</h2><blockquote><p>Error creating bean with name ‘sqlSessionFactory’ defined in class path resource [com&#x2F;baomidou&#x2F;mybatisplus&#x2F;autoconfigure&#x2F;MybatisPlusAutoConfiguration.class]: Unsatisfied dependency expressed through method ‘sqlSessionFactory’ parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘dataSource’: Invocation of init method failed; nested exception is java.lang.IllegalStateException: Failed to replace DataSource with an embedded database for tests. If you want an embedded database please put a supported one on the classpath or tune the replace attribute of @AutoConfigureTestDatabase.</p></blockquote><p>其中这句</p><blockquote><p>Failed to replace DataSource with an embedded database for tests.</p><p>无法使用内嵌数据库，我本身没用到内嵌数据库，可能是MybatisPlusTest自动切换到的吧</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><code>@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)</code></p><p>加上这个注解即可</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机操作系统-思维导图</title>
      <link href="/post/1669636687492.html"/>
      <url>/post/1669636687492.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/1669636700.png" alt="/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/1669636700.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apifox自动加请求头</title>
      <link href="/post/1669628237298.html"/>
      <url>/post/1669628237298.html</url>
      
        <content type="html"><![CDATA[<h1 id="全自动登陆大法"><a href="#全自动登陆大法" class="headerlink" title="全自动登陆大法"></a>全自动登陆大法</h1><ol><li>运行接口用例的时候，自动完成登录，而无需手动登录。</li><li>自动登录过一次后，保存登录态，避免每次执行用例都调用登录接口。</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>使用 环境变量（如：<code>ACCESS_TOKEN</code>）保存登录需要的凭证。</li><li>如凭证有过期时间，使用环境变量（如：<code>ACCESS_TOKEN_EXPIRES</code>）保存登录凭证的过期时间。</li><li>创建一个 公共脚本 ：<ol><li>判断环境变量<code>ACCESS_TOKEN</code>是否有值，以及<code>ACCESS_TOKEN_EXPIRES</code>是否过期，如果存在且未过期，跳出执行，否则下一步。</li><li>使用 pm.sendRequest 调用登录接口，将登录接口返回的登录凭证写入环境变量，过期时间也写入环境变量。</li></ol></li><li>设置需要登录态的接口用例：<ol><li>将用来验证登录态的参数值设置为 <code>&#123;&#123;ACCESS_TOKEN&#125;&#125;</code> 。<ul><li>将 header 里的<code>Authorization</code>的设置为<code>&#123;&#123;ACCESS_TOKEN&#125;&#125;</code>。注意：这里也可以使用 Cookie 或其他位置的参数，请根据实际情况确定。</li><li>此处也可以在 <strong>环境</strong> 里的 <strong>额外参数</strong> 统一设置，所有接口运行时会自动加上  <strong>额外参数</strong> ，无需每个接口手动设置。</li></ul></li><li>在 <strong>前置脚本</strong> 里引用前面创建公共脚本。</li></ol></li><li>在<code>Auth</code>选择认证方式，填入<code>&#123;&#123;ACCESS_TOKEN&#125;&#125;</code>即可</li></ol><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义发送登录接口请求方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendLoginRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取环境里的 前置URL</span></span><br><span class="line">    <span class="keyword">const</span> baseUrl = pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;BASE_URL&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录用户名，这里从环境变量 LOGIN_USERNAME 获取，也可以写死（但是不建议）</span></span><br><span class="line">    <span class="keyword">const</span> username = pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;LOGIN_USERNAME&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录用户名，这里从环境变量 LOGIN_PASSWORD 获取，也可以写死（但是不建议）</span></span><br><span class="line">    <span class="keyword">const</span> password = pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;LOGIN_PASSWORD&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造一个 POST x-www-form-urlencoded 格式请求。这里需要改成你们实际登录接口的请求参数。</span></span><br><span class="line">    <span class="keyword">const</span> loginRequest = &#123;</span><br><span class="line">        <span class="attr">url</span>: baseUrl + <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="comment">// body 为 json 格式</span></span><br><span class="line">        <span class="attr">header</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>, <span class="comment">// 注意：header 需要加上 Content-Type</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;raw&#x27;</span>,<span class="comment">// 此处为 raw</span></span><br><span class="line">            <span class="attr">raw</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;账户&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;密码&#x27;</span> &#125;), <span class="comment">// 序列化后的 json 字符串</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 发送请求。</span></span><br><span class="line">    <span class="comment">// pm.sendrequest 参考文档: https://www.apifox.cn/help/app/scripts/api-references/pm-reference/#pm-sendrequest</span></span><br><span class="line">    pm.<span class="title function_">sendRequest</span>(loginRequest, <span class="keyword">function</span> (<span class="params">err, res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 读取接口返回的 json 数据。</span></span><br><span class="line">            <span class="comment">// 如果你的 token 信息是存放在 cookie 的，可以使用 res.cookies.get(&#x27;token&#x27;) 方式获取。</span></span><br><span class="line">            <span class="comment">// cookies 参考文档：https://www.apifox.cn/help/app/scripts/api-references/pm-reference/#pm-cookies</span></span><br><span class="line">            <span class="keyword">const</span> jsonData = res.<span class="title function_">json</span>();</span><br><span class="line">            <span class="comment">// 将 accessToken 写入环境变量 ACCESS_TOKEN</span></span><br><span class="line">            pm.<span class="property">environment</span>.<span class="title function_">set</span>(<span class="string">&quot;ACCESS_TOKEN&quot;</span>, jsonData.<span class="property">data</span>.<span class="property">token</span>);</span><br><span class="line">            <span class="comment">// 将 accessTokenExpires 过期时间写入环境变量 ACCESS_TOKEN_EXPIRES</span></span><br><span class="line">            pm.<span class="property">environment</span>.<span class="title function_">set</span>(</span><br><span class="line">                <span class="string">&quot;ACCESS_TOKEN_EXPIRES&quot;</span>,</span><br><span class="line">                jsonData.<span class="property">data</span>.<span class="property">accessTokenExpires</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取环境变量里的 ACCESS_TOKEN</span></span><br><span class="line"><span class="keyword">const</span> accessToken = pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;ACCESS_TOKEN&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取环境变量里的 ACCESS_TOKEN_EXPIRES</span></span><br><span class="line"><span class="keyword">const</span> accessTokenExpires = pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;ACCESS_TOKEN_EXPIRES&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如 ACCESS_TOKEN 没有值，或 ACCESS_TOKEN_EXPIRES 已过期，则执行发送登录接口请求</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    !accessToken ||</span><br><span class="line">    (accessTokenExpires &amp;&amp; <span class="keyword">new</span> <span class="title class_">Date</span>(accessTokenExpires) &lt;= <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="title function_">sendLoginRequest</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apifox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j2彩色日志</title>
      <link href="/post/1669611456894.html"/>
      <url>/post/1669611456894.html</url>
      
        <content type="html"><![CDATA[<h2 id="PatternLayout自定义日志布局："><a href="#PatternLayout自定义日志布局：" class="headerlink" title="PatternLayout自定义日志布局："></a>PatternLayout自定义日志布局：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss, SSS&#125; : 日志生产时间,输出到毫秒的时间</span><br><span class="line">%-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0</span><br><span class="line">%c : logger的名称(%logger)</span><br><span class="line">%t : 输出当前线程名称</span><br><span class="line">%p : 日志输出格式</span><br><span class="line">%m : 日志内容，即 logger.info(&quot;message&quot;)</span><br><span class="line">%n : 换行符</span><br><span class="line">%C : Java类名(%F)</span><br><span class="line">%L : 行号</span><br><span class="line">%M : 方法名</span><br><span class="line">%l : 输出语句所在的行数, 包括类名、方法名、文件名、行数</span><br><span class="line">hostName : 本地机器名</span><br><span class="line">hostAddress : 本地ip地址</span><br></pre></td></tr></table></figure><h2 id="Log4j-xml配置"><a href="#Log4j-xml配置" class="headerlink" title="Log4j.xml配置"></a>Log4j.xml配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%highlight&#123;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; [%t] %highlight&#123;%-5level&#125;&#123;FATAL=white, ERROR=red, WARN=blue, INFO=blue, DEBUG=black, TRACE=green&#125; %cyan&#123;%c&#123;1.&#125;.%M(%L)&#125;: %msg%n&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h2><p><img src="/img/Log4j2%E5%BD%A9%E8%89%B2%E6%97%A5%E5%BF%97/1669611813.png" alt="/img/Log4j2%E5%BD%A9%E8%89%B2%E6%97%A5%E5%BF%97/1669611813.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dlog4j.skipJansi=false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Log4j2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA项目启动停止脚本</title>
      <link href="/post/1669349157947.html"/>
      <url>/post/1669349157947.html</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA项目启动停止脚本"><a href="#JAVA项目启动停止脚本" class="headerlink" title="JAVA项目启动停止脚本"></a>JAVA项目启动停止脚本</h1><p><strong>maven项目配合maven-assembly-plugin插件，可以将\lib分开，并将脚本打入到项目\bin目录下，实现bin\start.sh 启动系统</strong></p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;classesDirectory&gt;target/classes/&lt;/classesDirectory&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                        &lt;manifest&gt;</span><br><span class="line">                            &lt;mainClass&gt;com.alibaba.dubbo.container.Main&lt;/mainClass&gt;</span><br><span class="line">                            &lt;!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 --&gt;</span><br><span class="line">                            &lt;useUniqueVersions&gt;false&lt;/useUniqueVersions&gt;</span><br><span class="line">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class="line">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class="line">                        &lt;/manifest&gt;</span><br><span class="line">                        &lt;manifestEntries&gt;</span><br><span class="line">                            &lt;Class-Path&gt;.&lt;/Class-Path&gt;</span><br><span class="line">                        &lt;/manifestEntries&gt;</span><br><span class="line">                    &lt;/archive&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;unpack&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;unpack&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;artifactItems&gt;</span><br><span class="line">                                &lt;artifactItem&gt;</span><br><span class="line">                                    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                                    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">                                    &lt;version&gt;2.5.7&lt;/version&gt;</span><br><span class="line">                                    &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/dubbo&lt;/outputDirectory&gt;</span><br><span class="line">                                    &lt;includes&gt;META-INF/assembly/**&lt;/includes&gt;</span><br><span class="line">                                &lt;/artifactItem&gt;</span><br><span class="line">                            &lt;/artifactItems&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;descriptor&gt;src/main/assembly/assembly.xml&lt;/descriptor&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><h2 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">cd `dirname $0`</span><br><span class="line">BIN_DIR=`pwd`</span><br><span class="line">cd ..</span><br><span class="line">DEPLOY_DIR=`pwd`</span><br><span class="line">CONF_DIR=$DEPLOY_DIR/conf</span><br><span class="line"></span><br><span class="line">SERVER_NAME=`sed &#x27;/dubbo.application.name/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line">SERVER_PROTOCOL=`sed &#x27;/dubbo.protocol.name/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line">SERVER_HOST=`sed &#x27;/dubbo.protocol.host/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line">SERVER_PORT=`sed &#x27;/dubbo.protocol.port/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line">LOGS_FILE=`sed &#x27;/dubbo.log4j.file/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SERVER_HOST&quot; ]; then</span><br><span class="line">    SERVER_HOST=`127.0.0.1`</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SERVER_NAME&quot; ]; then</span><br><span class="line">    SERVER_NAME=`hostname`</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">PIDS=`ps -ef | grep java | grep -v grep | grep &quot;$CONF_DIR&quot; |awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ -n &quot;$PIDS&quot; ]; then</span><br><span class="line">    echo &quot;ERROR: The $SERVER_NAME already started!&quot;</span><br><span class="line">    echo &quot;PID: $PIDS&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$SERVER_PORT&quot; ]; then</span><br><span class="line">    SERVER_PORT_COUNT=`netstat -tln | grep $SERVER_PORT | wc -l`</span><br><span class="line">    if [ $SERVER_PORT_COUNT -gt 0 ]; then</span><br><span class="line">        echo &quot;ERROR: The $SERVER_NAME port $SERVER_PORT already used!&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">LOGS_DIR=&quot;&quot;</span><br><span class="line">if [ -n &quot;$LOGS_FILE&quot; ]; then</span><br><span class="line">    LOGS_DIR=`dirname $LOGS_FILE`</span><br><span class="line">else</span><br><span class="line">    LOGS_DIR=$DEPLOY_DIR/logs</span><br><span class="line">fi</span><br><span class="line">if [ ! -d $LOGS_DIR ]; then</span><br><span class="line">    mkdir $LOGS_DIR</span><br><span class="line">fi</span><br><span class="line">STDOUT_FILE=$LOGS_DIR/stdout.log</span><br><span class="line"></span><br><span class="line">LIB_DIR=$DEPLOY_DIR/lib</span><br><span class="line">LIB_JARS=`ls $LIB_DIR|grep .jar|awk &#x27;&#123;print &quot;&#x27;$LIB_DIR&#x27;/&quot;$0&#125;&#x27;|tr &quot;\n&quot; &quot;:&quot;`</span><br><span class="line"></span><br><span class="line">JAVA_OPTS=&quot; -Djava.awt.headless=true -Djava.net.preferIPv4Stack=true &quot;</span><br><span class="line">JAVA_DEBUG_OPTS=&quot;&quot;</span><br><span class="line">if [ &quot;$1&quot; = &quot;debug&quot; ]; then</span><br><span class="line">    JAVA_DEBUG_OPTS=&quot; -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n &quot;</span><br><span class="line">fi</span><br><span class="line">JAVA_JMX_OPTS=&quot;&quot;</span><br><span class="line">if [ &quot;$1&quot; = &quot;jmx&quot; ]; then</span><br><span class="line">    JAVA_JMX_OPTS=&quot; -Dcom.sun.management.jmxremote.port=1099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false &quot;</span><br><span class="line">fi</span><br><span class="line">JAVA_MEM_OPTS=&quot;&quot;</span><br><span class="line">BITS=`java -version 2&gt;&amp;1 | grep -i 64-bit`</span><br><span class="line">if [ -n &quot;$BITS&quot; ]; then</span><br><span class="line">    JAVA_MEM_OPTS=&quot; -server -Xmx2g -Xms2g -Xmn256m -XX:PermSize=128m -Xss256k -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 &quot;</span><br><span class="line">else</span><br><span class="line">    JAVA_MEM_OPTS=&quot; -server -Xms1g -Xmx1g -XX:PermSize=128m -XX:SurvivorRatio=2 -XX:+UseParallelGC &quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo -e &quot;Starting the $SERVER_NAME ...\c&quot;</span><br><span class="line">nohup java $JAVA_OPTS $JAVA_MEM_OPTS $JAVA_DEBUG_OPTS $JAVA_JMX_OPTS -classpath $CONF_DIR:$LIB_JARS com.alibaba.dubbo.container.Main &gt; $STDOUT_FILE 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot;OK!&quot;</span><br><span class="line">PIDS=`ps -f | grep java | grep -v grep | grep &quot;$DEPLOY_DIR&quot; | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">echo &quot;PID: $PIDS&quot;</span><br><span class="line">echo &quot;STDOUT: $STDOUT_FILE&quot;</span><br></pre></td></tr></table></figure><h2 id="stop-sh"><a href="#stop-sh" class="headerlink" title="stop.sh"></a>stop.sh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">cd `dirname $0`</span><br><span class="line">BIN_DIR=`pwd`</span><br><span class="line">cd ..</span><br><span class="line">DEPLOY_DIR=`pwd`</span><br><span class="line">CONF_DIR=$DEPLOY_DIR/conf</span><br><span class="line"></span><br><span class="line">SERVER_NAME=`sed &#x27;/dubbo.application.name/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SERVER_NAME&quot; ]; then</span><br><span class="line">    SERVER_NAME=`hostname`</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">PIDS=`ps -ef | grep java | grep -v grep | grep &quot;$CONF_DIR&quot; |awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ -z &quot;$PIDS&quot; ]; then</span><br><span class="line">    echo &quot;ERROR: The $SERVER_NAME does not started!&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; != &quot;skip&quot; ]; then</span><br><span class="line">    $BIN_DIR/dump.sh</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo -e &quot;Stopping the $SERVER_NAME ...\c&quot;</span><br><span class="line">for PID in $PIDS ; do</span><br><span class="line">    kill $PID &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">COUNT=0</span><br><span class="line">while [ $COUNT -lt 1 ]; do    </span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">    COUNT=1</span><br><span class="line">    for PID in $PIDS ; do</span><br><span class="line">        PID_EXIST=`ps -f -p $PID | grep java`</span><br><span class="line">        if [ -n &quot;$PID_EXIST&quot; ]; then</span><br><span class="line">            COUNT=0</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;OK!&quot;</span><br><span class="line">echo &quot;PID: $PIDS&quot;</span><br></pre></td></tr></table></figure><h2 id="dump-sh"><a href="#dump-sh" class="headerlink" title="dump.sh"></a>dump.sh</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"><span class="built_in">cd</span> `dirname $<span class="number">0</span>`</span><br><span class="line">BIN_DIR=`pwd`</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">DEPLOY_DIR=`pwd`</span><br><span class="line">CONF_DIR=$DEPLOY_DIR/conf</span><br><span class="line"></span><br><span class="line">SERVER_NAME=`sed &#x27;/dubbo.application.name/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line">LOGS_FILE=`sed &#x27;/dubbo.log4j.file/!d;s/.*=//&#x27; conf/dubbo.properties | tr -d &#x27;\r&#x27;`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z &quot;$SERVER_NAME&quot; ]; then</span><br><span class="line">    SERVER_NAME=`hostname`</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">PIDS=`ps -ef | grep java | grep -v grep | grep &quot;$CONF_DIR&quot; |awk &#x27;&#123;<span class="built_in">print</span> $<span class="number">2</span>&#125;&#x27;`</span><br><span class="line"><span class="keyword">if</span> [ -z &quot;$PIDS&quot; ]; then</span><br><span class="line">    <span class="built_in">echo</span> &quot;ERROR: The $SERVER_NAME does <span class="keyword">not</span> started!&quot;</span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">LOGS_DIR=&quot;&quot;</span><br><span class="line"><span class="keyword">if</span> [ -n &quot;$LOGS_FILE&quot; ]; then</span><br><span class="line">    LOGS_DIR=`dirname $LOGS_FILE`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    LOGS_DIR=$DEPLOY_DIR/logs</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ ! -d $LOGS_DIR ]; then</span><br><span class="line">    <span class="built_in">mkdir</span> $LOGS_DIR</span><br><span class="line">fi</span><br><span class="line">DUMP_DIR=$LOGS_DIR/dump</span><br><span class="line"><span class="keyword">if</span> [ ! -d $DUMP_DIR ]; then</span><br><span class="line">    <span class="built_in">mkdir</span> $DUMP_DIR</span><br><span class="line">fi</span><br><span class="line">DUMP_DATE=`<span class="built_in">date</span> +<span class="variable">%Y%</span>m<span class="variable">%d%</span>H<span class="variable">%M%</span>S`</span><br><span class="line">DATE_DIR=$DUMP_DIR/$DUMP_DATE</span><br><span class="line"><span class="keyword">if</span> [ ! -d $DATE_DIR ]; then</span><br><span class="line">    <span class="built_in">mkdir</span> $DATE_DIR</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e &quot;Dumping the $SERVER_NAME ...\c&quot;</span><br><span class="line"><span class="keyword">for</span> PID <span class="keyword">in</span> $PIDS ; <span class="keyword">do</span></span><br><span class="line">    jstack $PID &gt; $DATE_DIR/jstack-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    jinfo $PID &gt; $DATE_DIR/jinfo-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    jstat -gcutil $PID &gt; $DATE_DIR/jstat-gcutil-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    jstat -gccapacity $PID &gt; $DATE_DIR/jstat-gccapacity-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    jmap $PID &gt; $DATE_DIR/jmap-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    jmap -heap $PID &gt; $DATE_DIR/jmap-heap-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    jmap -histo $PID &gt; $DATE_DIR/jmap-histo-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    <span class="keyword">if</span> [ -r /usr/sbin/lsof ]; then</span><br><span class="line">    /usr/sbin/lsof -p $PID &gt; $DATE_DIR/lsof-$PID.dump</span><br><span class="line">    <span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -r /bin/netstat ]; then</span><br><span class="line">/bin/netstat -an &gt; $DATE_DIR/netstat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ -r /usr/bin/iostat ]; then</span><br><span class="line">/usr/bin/iostat &gt; $DATE_DIR/iostat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ -r /usr/bin/mpstat ]; then</span><br><span class="line">/usr/bin/mpstat &gt; $DATE_DIR/mpstat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ -r /usr/bin/vmstat ]; then</span><br><span class="line">/usr/bin/vmstat &gt; $DATE_DIR/vmstat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ -r /usr/bin/free ]; then</span><br><span class="line">/usr/bin/free -t &gt; $DATE_DIR/free.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ -r /usr/bin/sar ]; then</span><br><span class="line">/usr/bin/sar &gt; $DATE_DIR/sar.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ -r /usr/bin/uptime ]; then</span><br><span class="line">/usr/bin/uptime &gt; $DATE_DIR/uptime.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> -e &quot;.\c&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> &quot;OK!&quot;</span><br><span class="line"><span class="built_in">echo</span> &quot;DUMP: $DATE_DIR&quot;</span><br></pre></td></tr></table></figure><h2 id="restart-sh"><a href="#restart-sh" class="headerlink" title="restart.sh"></a>restart.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> `<span class="built_in">dirname</span> <span class="variable">$0</span>`</span><br><span class="line">./stop.sh</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure><h2 id="server-sh"><a href="#server-sh" class="headerlink" title="server.sh"></a>server.sh</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">cd `dirname $0`</span><br><span class="line">if [ &quot;$1&quot; = &quot;start&quot; ]; then</span><br><span class="line">    ./start.sh</span><br><span class="line">else</span><br><span class="line">    if [ &quot;$1&quot; = &quot;stop&quot; ]; then</span><br><span class="line">        ./stop.sh</span><br><span class="line">    else</span><br><span class="line">        if [ &quot;$1&quot; = &quot;debug&quot; ]; then</span><br><span class="line">            ./start.sh debug</span><br><span class="line">        else</span><br><span class="line">            if [ &quot;$1&quot; = &quot;restart&quot; ]; then</span><br><span class="line">                ./restart.sh</span><br><span class="line">            else</span><br><span class="line">                if [ &quot;$1&quot; = &quot;dump&quot; ]; then</span><br><span class="line">                    ./dump.sh</span><br><span class="line">                else</span><br><span class="line">                    echo &quot;ERROR: Please input argument: start or stop or debug or restart or dump&quot;</span><br><span class="line">                    exit 1</span><br><span class="line">                fi</span><br><span class="line">            fi</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="assembly-xml"><a href="#assembly-xml" class="headerlink" title="assembly.xml"></a>assembly.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>conf<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0644<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Windows程序获取管理员权限</title>
      <link href="/post/1669281357114.html"/>
      <url>/post/1669281357114.html</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-Windows程序获取管理员权限"><a href="#Golang-Windows程序获取管理员权限" class="headerlink" title="Golang Windows程序获取管理员权限"></a>Golang Windows程序获取管理员权限</h1><blockquote><p>最近写个工具需要用到管理员权限，看了网上的资料，思路都是通过Windows的.Manifest xml文件构建syso，然后打包运行即可。</p></blockquote><h1 id="windows-manifest文件"><a href="#windows-manifest文件" class="headerlink" title="windows manifest文件"></a>windows manifest文件</h1><blockquote><p>An application manifest (also known as a side-by-side application manifest, or a <em>fusion</em> manifest) is an XML file that describes and identifies the shared and private side-by-side assemblies that an application should bind to at run time. These should be the same assembly versions that were used to test the application. Application manifests might also describe metadata for files that are private to the application.</p><p><a href="https://learn.microsoft.com/en-us/windows/win32/sbscs/application-manifests">官方介绍</a></p><p>Manifest事实上就是一个以.manifest为后缀的XML文件，用于组织和描述隔离应用程序及并行组件，其内部的信息如元素则标识着一个唯一的程序集，和其他信息一起，他们用于COM类、接口及库的绑定和激活，而这些信息，以往都是存储在注册表中的。另外，Manifests也制定了组成程序集的文件及Windows类</p></blockquote><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="1-获取rsrc"><a href="#1-获取rsrc" class="headerlink" title="1.获取rsrc"></a>1.获取rsrc</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/akavel/rsrc</span><br><span class="line">或者</span><br><span class="line">go get github.com/gonutz/rsrc</span><br></pre></td></tr></table></figure><h2 id="2-创建-manifest文件"><a href="#2-创建-manifest文件" class="headerlink" title="2.创建.manifest文件"></a>2.创建.manifest文件</h2><p>在项目根目录中创建*.manifest文件<br>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span><br><span class="line">&lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&gt;</span><br><span class="line">    &lt;trustInfo xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;</span><br><span class="line">        &lt;security&gt;</span><br><span class="line">            &lt;requestedPrivileges&gt;</span><br><span class="line">                &lt;requestedExecutionLevel level=&quot;requireAdministrator&quot; /&gt;</span><br><span class="line">            &lt;/requestedPrivileges&gt;</span><br><span class="line">        &lt;/security&gt;</span><br><span class="line">    &lt;/trustInfo&gt;</span><br><span class="line">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure><h2 id="3-编译-syso"><a href="#3-编译-syso" class="headerlink" title="3.编译.syso"></a>3.编译.syso</h2><p>manifest文件名没啥规定</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsrc -manifest .\filename.manifest -o filename.syso</span><br></pre></td></tr></table></figure><h2 id="4-Go编译打包"><a href="#4-Go编译打包" class="headerlink" title="4.Go编译打包"></a>4.Go编译打包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>支持Windows 6.0界面库、支持管理员权限、兼容WIN8&#x2F;WIN10下取系统版本、兼容DPI Aware，完整manifest可以参考<a href="https://blog.csdn.net/cometnet/article/details/52995192">https://blog.csdn.net/cometnet/article/details/52995192</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang修复谷歌翻译</title>
      <link href="/post/1669269648720.html"/>
      <url>/post/1669269648720.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>自 2022 年 9 月 28 日起，谷歌翻译退出了中国市场，这导致 translate.googleapis.com 这个谷歌翻译接口域名无法在国内直接连通，但目前可以通过修改 hosts 的方式从国内连接到此域名。</p></blockquote><p><a href="https://github.com/hcfyapp/google-translate-cn-ip">Ip来源</a></p><p>正在学习Go，就用Go来写一个</p><p>Go代码可以直接生成exe可执行文件</p><p><a href="/img/Golang%E4%BF%AE%E5%A4%8D%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91/main.exe">可执行文件</a></p><p><a href="/img/Golang%E4%BF%AE%E5%A4%8D%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91/ips.txt">ips.txt</a><br>仓库地址：<a href="https://github.com/oohmygosh/FixGoogleTranslation">FixGoogleTranslation</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line">_ <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/text/encoding/simplifiedchinese&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Ip <span class="keyword">struct</span> &#123;</span><br><span class="line">ip <span class="type">string</span></span><br><span class="line">ms <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed ips.txt</span></span><br><span class="line"><span class="keyword">var</span> innerIps <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;获取最新Ip&quot;</span>)</span><br><span class="line">ips, err := ReadTxtFormInternet(<span class="string">&quot;https://raw.githubusercontent.com/hcfyapp/google-translate-cn-ip/main/ips.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">printRed(<span class="string">&quot;获取失败，读取本地文件&quot;</span>)</span><br><span class="line">ips, err = readFile(<span class="string">&quot;ips.txt&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="built_in">len</span>(ips))</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> ips &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ip *Ip)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">ms, ok := ping(ip.ip)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">ip.ms = ms</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;========================结果=========================&quot;</span>)</span><br><span class="line">fast := ips[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line"><span class="keyword">if</span> ip.ms &lt; fast.ms &#123;</span><br><span class="line">fast = ip</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// translate.googleapis.com</span></span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;IP:&quot;</span>, fast.ip, <span class="string">&quot;延迟:&quot;</span>, fast.ms)</span><br><span class="line">modifyHosts(fast)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;修改完成，按任意键退出&quot;</span>)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1</span>)</span><br><span class="line">_, _ = os.Stdin.Read(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyHosts</span><span class="params">(ip *Ip)</span></span> &#123;</span><br><span class="line">hostsPath := <span class="string">&quot;C:\\Windows\\System32\\drivers\\etc\\hosts&quot;</span></span><br><span class="line">open, err := os.Open(hostsPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;文件打开失败&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(open *os.File)</span></span> &#123;</span><br><span class="line">_ = open.Close()</span><br><span class="line">&#125;(open)</span><br><span class="line">reader := bufio.NewReader(open)</span><br><span class="line">host := <span class="string">&quot;translate.googleapis.com&quot;</span></span><br><span class="line">result := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">line, _, err := reader.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">readLine := <span class="type">string</span>(line)</span><br><span class="line"><span class="keyword">if</span> !strings.Contains(readLine, <span class="string">&quot;#&quot;</span>) &amp;&amp; strings.Contains(readLine, host) &#123;</span><br><span class="line">result += ip.ip + <span class="string">&quot;\t&quot;</span> + host</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result += readLine</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">&quot;\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fw, err := os.OpenFile(hostsPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, <span class="number">0666</span>) <span class="comment">//os.O_TRUNC清空文件重新写入，否则原文件内容可能残留</span></span><br><span class="line">w := bufio.NewWriter(fw)</span><br><span class="line">_, err = w.WriteString(result)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = w.Flush()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">printRed(<span class="string">&quot;修改hosts失败！请用管理员权限运行！&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(fw *os.File)</span></span> &#123;</span><br><span class="line">_ = fw.Close()</span><br><span class="line">&#125;(fw)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(path <span class="type">string</span>)</span></span> ([]*Ip, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> result []*Ip</span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;没有找到ips.txt文件，使用内置IP&quot;</span>)</span><br><span class="line">after := strings.Split(innerIps, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> after &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, &amp;Ip&#123;ip: ip, ms: <span class="number">999</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">ips, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">ip := strings.TrimSpace(ips)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, &amp;Ip&#123;ip: ip, ms: <span class="number">888</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ping</span><span class="params">(ip <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ip == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">out, _ := exec.Command(<span class="string">&quot;ping&quot;</span>, ip, <span class="string">&quot;-n&quot;</span>, <span class="string">&quot;1&quot;</span>).Output()</span><br><span class="line">str := ConvertGBKByte2Str(out)</span><br><span class="line">compile := regexp.MustCompile(<span class="string">&quot;[\\s\\S.]*平均\\s=\\s(\\d+)&quot;</span>)</span><br><span class="line">subMatch := compile.FindStringSubmatch(str)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(subMatch) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;IP:&quot;</span>, ip, <span class="string">&quot;超时&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">ms, err := strconv.Atoi(subMatch[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;IP:&quot;</span>, ip, <span class="string">&quot;延迟&quot;</span>, ms)</span><br><span class="line"><span class="keyword">return</span> ms, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertGBKByte2Str</span><span class="params">(gbkStr []<span class="type">byte</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//如果是[]byte格式的字符串，可以使用Bytes方法</span></span><br><span class="line">b, _ := simplifiedchinese.GBK.NewDecoder().Bytes(gbkStr)</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadTxtFormInternet</span><span class="params">(filePath <span class="type">string</span>)</span></span> ([]*Ip, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> result []*Ip</span><br><span class="line">resp, err := http.Get(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(Body io.ReadCloser)</span></span> &#123;</span><br><span class="line">err := Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;流关闭失败\n%s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(resp.Body)</span><br><span class="line">reader := bufio.NewReaderSize(resp.Body, <span class="number">1024</span>*<span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">b, errR := reader.ReadBytes(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//按照行读取，遇到\n结束读取</span></span><br><span class="line"><span class="keyword">if</span> errR != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errR == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(errR.Error())</span><br><span class="line">&#125;</span><br><span class="line">lineData := strings.TrimSuffix(strings.TrimSuffix(<span class="type">string</span>(b), <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;\r&quot;</span>)</span><br><span class="line">result = <span class="built_in">append</span>(result, &amp;Ip&#123;ip: lineData, ms: <span class="number">999</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenUri</span><span class="params">(uri <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">`cmd`</span>, <span class="string">`/c`</span>, <span class="string">`start`</span>, uri)</span><br><span class="line">cmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;HideWindow: <span class="literal">true</span>&#125;</span><br><span class="line">err := cmd.Start()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printRed</span><span class="params">(str <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c[1;40;31m%s%c[0m\n&quot;</span>, <span class="number">0x1B</span>, str, <span class="number">0x1B</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8 特性-Lambda</title>
      <link href="/post/1669176674177.html"/>
      <url>/post/1669176674177.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Lambda表达式仅能放入以下代码：使用了<code>@Funcational</code>注释的函数式接口，自带一个抽象函数的方法，单个抽象方法。这些称为Lambda表达式的目标类型，可以用作返回类型，或传入Lambda目标代码的参数。如，一个方法接受<code>Runable</code>、<code>Comparable</code>或<code>Callable</code>接口，都有单个抽象方法，可以传入lambda表达式。</p><p>如果仅是一个参数相同的简单方法调用，<code>lambda</code>表达式内可以适用方法引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(v -&gt; System.out.println(v)); </span><br><span class="line"><span class="comment">// 使用方法引用</span></span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>如果对参数有修改，就需要输入完整的<code>lambda</code>表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.forEach((String v) -&gt; System.out.println(<span class="string">&quot;###&quot;</span> + v + <span class="string">&quot;###&quot;</span>));</span><br><span class="line"><span class="comment">// 可以省略参数类型声明</span></span><br><span class="line">list.forEach(v -&gt; System.out.println(<span class="string">&quot;###&quot;</span> + v + <span class="string">&quot;###&quot;</span>));</span><br></pre></td></tr></table></figure><p>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</p><p>Lambda表达式在Java中又称为闭包或匿名函数</p><p>Lambda方法在编译器内部被翻译成私有方法，并派发 invokedynamic 字节码指令来进行调用。可以使用JDK中的 javap 工具来反编译class文件。使用 javap -p 或 javap -c -v 命令来看一看lambda表达式生成的字节码。大致应该长这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> java.lang.Object lambda$<span class="number">0</span>(java.lang.String);</span><br></pre></td></tr></table></figure><p><code>lambda</code>只能引用<code>final</code>或者<code>final</code>局部变量，也就是不能再表达式里面修改定义在外部的变量</p><p><img src="/img/JAVA8%20%E7%89%B9%E6%80%A7/1669178039.png" alt="/img/JAVA8%20%E7%89%B9%E6%80%A7/1669178039.png"></p><p>如果只是访问变量不做修改是没问题的</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。</p><p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p><p>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p><p>元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br><span class="line">| stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect|</span><br><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(e -&gt; <span class="string">&quot;oohmygosh&quot;</span>.equals(e.getName()))</span><br></pre></td></tr></table></figure><p>如上示例，这行代码并未做什么实际性的工作，filter只是<strong>描述</strong>了Stream， <strong>没有产生新的集合</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(e -&gt; <span class="string">&quot;oohmygosh&quot;</span>.equals(e.getName())).collect(Collectors.toList())</span><br></pre></td></tr></table></figure><p><code>Collect</code>最终会从Stream产生新值，拥有终止操作。</p><p>和建造者模式类似经过一些列加工最后通过<code>build()</code>生成最终结果</p><h3 id="流的操作种类"><a href="#流的操作种类" class="headerlink" title="流的操作种类"></a>流的操作种类</h3><p>流的操作分为两种，分别为中间操作和终端操作。</p><ol><li>中间操作<br>当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为“中间操作”。<br>中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。</li><li>终端操作<br>当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终端操作。<br>终端操作将返回一个执行结果，这就是你想要的数据。</li></ol><h3 id="流的操作过程"><a href="#流的操作过程" class="headerlink" title="流的操作过程"></a>流的操作过程</h3><p>使用流一共需要三步：</p><ol><li>准备一个数据源</li><li>执行中间操作<br>中间操作可以有多个，它们可以串连起来形成流水线。</li><li>执行终端操作<br>执行终端操作后本次流结束，你将获得一个执行结果。</li></ol><h2 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h2><h3 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h3><p>在使用流之前，首先需要拥有一个数据源，并通过StreamAPI提供的一些方法获取该数据源的流对象。数据源可以有多种形式：</p><p><strong>1. 集合</strong></p><p>这种数据源较为常用，通过stream()方法即可获取流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;(); </span><br><span class="line">Stream&lt;Person&gt; stream = list.stream();</span><br></pre></td></tr></table></figure><p><strong>2. 数组</strong></p><p>通过Arrays类提供的静态函数stream()获取数组的流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;chaimm&quot;</span>,<span class="string">&quot;peter&quot;</span>,<span class="string">&quot;john&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(names);</span><br></pre></td></tr></table></figure><p><strong>3. 值</strong></p><p>直接将几个值变成流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;chaimm&quot;</span>,<span class="string">&quot;peter&quot;</span>,<span class="string">&quot;john&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>4. 文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">Stream</span> <span class="variable">lines</span> <span class="operator">=</span> Files.lines(Paths.get(“文件路径名”),Charset.defaultCharset()))&#123;</span><br><span class="line">    <span class="comment">//可对lines做一些操作</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. iterator</strong></p><p><strong>创建无限流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>)</span><br><span class="line">      .limit(<span class="number">10</span>)</span><br><span class="line">      .forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>PS：Java7简化了IO操作，把打开IO操作放在try后的括号中即可省略关闭IO的代码。</p></blockquote><h3 id="筛选-filter"><a href="#筛选-filter" class="headerlink" title="筛选 filter"></a>筛选 filter</h3><p>filter 函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。<br>如，筛选出所有学生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; result = list.stream()</span><br><span class="line">                    .filter(Person::isStudent)</span><br><span class="line">                    .collect(toList());</span><br></pre></td></tr></table></figure><h3 id="去重distinct"><a href="#去重distinct" class="headerlink" title="去重distinct"></a>去重distinct</h3><p>去掉重复的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; result = list.stream()</span><br><span class="line">                    .distinct()</span><br><span class="line">                    .collect(toList());</span><br></pre></td></tr></table></figure><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p>截取流的前N个元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; result = list.stream()</span><br><span class="line">                    .limit(<span class="number">3</span>)</span><br><span class="line">                    .collect(toList());</span><br></pre></td></tr></table></figure><h3 id="跳过"><a href="#跳过" class="headerlink" title="跳过"></a>跳过</h3><p>跳过流的前n个元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; result = list.stream()</span><br><span class="line">                    .skip(<span class="number">3</span>)</span><br><span class="line">                    .collect(toList());</span><br></pre></td></tr></table></figure><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>对流中的每个元素执行一个函数，使得元素转换成另一种类型输出。流会将每一个元素输送给map函数，并执行map中的Lambda表达式，最后将执行结果存入一个新的流中。<br>如，获取每个人的姓名(实则是将Perosn类型转换成String类型)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; result = list.stream()</span><br><span class="line">                    .map(Person::getName)</span><br><span class="line">                    .collect(toList());</span><br></pre></td></tr></table></figure><h3 id="合并多个流"><a href="#合并多个流" class="headerlink" title="合并多个流"></a>合并多个流</h3><p>例：列出List中各不相同的单词，List集合如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;I am a boy&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;I love the girl&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;But the girl loves another girl&quot;</span>);</span><br></pre></td></tr></table></figure><p>思路如下：</p><p>首先将list变成流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream();</span><br></pre></td></tr></table></figure><p>按空格分词：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">            .map(line-&gt;line.split(<span class="string">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure><p>分完词之后，每个元素变成了一个String[]数组。</p><p>将每个 <code>String[]</code> 变成流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">            .map(line-&gt;line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            .map(Arrays::stream)</span><br></pre></td></tr></table></figure><p>此时一个大流里面包含了一个个小流，我们需要将这些小流合并成一个流。</p><p>将小流合并成一个大流：用 <code>flatMap</code> 替换刚才的 map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">    .map(line-&gt;line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    .flatMap(Arrays::stream)</span><br></pre></td></tr></table></figure><p>去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">    .map(line-&gt;line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    .flatMap(Arrays::stream)</span><br><span class="line">    .distinct()</span><br><span class="line">    .collect(toList());</span><br></pre></td></tr></table></figure><h3 id="是否匹配任一元素：anyMatch"><a href="#是否匹配任一元素：anyMatch" class="headerlink" title="是否匹配任一元素：anyMatch"></a>是否匹配任一元素：anyMatch</h3><p>anyMatch用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。<br>如，判断list中是否有学生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">            .anyMatch(Person::isStudent);</span><br></pre></td></tr></table></figure><h3 id="是否匹配所有元素：allMatch"><a href="#是否匹配所有元素：allMatch" class="headerlink" title="是否匹配所有元素：allMatch"></a>是否匹配所有元素：allMatch</h3><p>allMatch用于判断流中的所有元素是否都满足指定条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。<br>如，判断是否所有人都是学生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">            .allMatch(Person::isStudent);</span><br></pre></td></tr></table></figure><h3 id="是否未匹配所有元素：noneMatch"><a href="#是否未匹配所有元素：noneMatch" class="headerlink" title="是否未匹配所有元素：noneMatch"></a>是否未匹配所有元素：noneMatch</h3><p>noneMatch与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">            .noneMatch(Person::isStudent);</span><br></pre></td></tr></table></figure><h3 id="获取任一元素findAny"><a href="#获取任一元素findAny" class="headerlink" title="获取任一元素findAny"></a>获取任一元素findAny</h3><p>findAny能够从流中随便选一个元素出来，它返回一个Optional类型的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Person&gt; person = list.stream().findAny();</span><br></pre></td></tr></table></figure><h3 id="获取第一个元素findFirst"><a href="#获取第一个元素findFirst" class="headerlink" title="获取第一个元素findFirst"></a>获取第一个元素findFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Person&gt; person = list.stream().findFirst();</span><br></pre></td></tr></table></figure><h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><p>归约是将集合中的所有元素经过指定运算，折叠成一个元素输出，如：求最值、平均数等，这些操作都是将一个集合的元素折叠成一个元素输出。</p><p>在流中，reduce函数能实现归约。<br>reduce函数接收两个参数：</p><ol><li>初始值</li><li>进行归约操作的Lambda表达式</li></ol><p><strong>元素求和：自定义Lambda表达式实现求和</strong></p><p>例：计算所有人的年龄总和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, (person1,person2)-&gt;person1.getAge()+person2.getAge());</span><br></pre></td></tr></table></figure><ol><li>reduce的第一个参数表示初试值为0；</li><li>reduce的第二个参数为需要进行的归约操作，它接收一个拥有两个参数的Lambda表达式，reduce会把流中的元素两两输给Lambda表达式，最后将计算出累加之和。</li></ol><p><strong>元素求和：使用Integer.sum函数求和</strong></p><p>上面的方法中我们自己定义了Lambda表达式实现求和运算，如果当前流的元素为数值类型，那么可以使用Integer提供了sum函数代替自定义的Lambda表达式，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure><p>Integer类还提供了 <code>min</code>、<code>max</code> 等一系列数值操作，当流中元素为数值类型时可以直接使用。</p><h3 id="数值流的使用"><a href="#数值流的使用" class="headerlink" title="数值流的使用"></a>数值流的使用</h3><p>采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。<br>当流操作为纯数值操作时，使用数值流能获得较高的效率。</p><p><strong>将普通流转换成数值流</strong></p><p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。<br>如，将Person中的age转换成数值流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> list.stream().mapToInt(Person::getAge);</span><br></pre></td></tr></table></figure><p><strong>数值计算</strong></p><p>每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OptionalInt</span> <span class="variable">maxAge</span> <span class="operator">=</span> list.stream()</span><br><span class="line">                                .mapToInt(Person::getAge)</span><br><span class="line">                                .max();</span><br></pre></td></tr></table></figure><p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。<br>此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong</p><h2 id="中间操作和收集操作"><a href="#中间操作和收集操作" class="headerlink" title="中间操作和收集操作"></a>中间操作和收集操作</h2><table><thead><tr><th align="center">操作</th><th align="left">类型</th><th align="left">返回类型</th><th align="left">使用的类型&#x2F;函数式接口</th><th align="left">函数描述符</th></tr></thead><tbody><tr><td align="center"><code>filter</code></td><td align="left">中间</td><td align="left"><code>Stream</code></td><td align="left"><code>Predicate</code></td><td align="left"><code>T -&gt; boolean</code></td></tr><tr><td align="center"><code>distinct</code></td><td align="left">中间</td><td align="left"><code>Stream</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="center"><code>skip</code></td><td align="left">中间</td><td align="left"><code>Stream</code></td><td align="left">long</td><td align="left"></td></tr><tr><td align="center"><code>map</code></td><td align="left">中间</td><td align="left"><code>Stream</code></td><td align="left"><code>Function</code></td><td align="left"><code>T -&gt; R</code></td></tr><tr><td align="center"><code>flatMap</code></td><td align="left">中间</td><td align="left"><code>Stream</code></td><td align="left"><code>Function&gt;</code></td><td align="left"><code>T -&gt; Stream</code></td></tr><tr><td align="center"><code>limit</code></td><td align="left">中间</td><td align="left"><code>Stream</code></td><td align="left">long</td><td align="left"></td></tr><tr><td align="center"><code>sorted</code></td><td align="left">中间</td><td align="left"><code>Stream</code></td><td align="left"><code>Comparator</code></td><td align="left"><code>(T, T) -&gt; int</code></td></tr><tr><td align="center"><code>anyMatch</code></td><td align="left">终端</td><td align="left"><code>boolean</code></td><td align="left"><code>Predicate</code></td><td align="left"><code>T -&gt; boolean</code></td></tr><tr><td align="center"><code>noneMatch</code></td><td align="left">终端</td><td align="left"><code>boolean</code></td><td align="left"><code>Predicate</code></td><td align="left"><code>T -&gt; boolean</code></td></tr><tr><td align="center"><code>allMatch</code></td><td align="left">终端</td><td align="left"><code>boolean</code></td><td align="left"><code>Predicate</code></td><td align="left"><code>T -&gt; boolean</code></td></tr><tr><td align="center"><code>findAny</code></td><td align="left">终端</td><td align="left"><code>Optional</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="center"><code>findFirst</code></td><td align="left">终端</td><td align="left"><code>Optional</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="center"><code>forEach</code></td><td align="left">终端</td><td align="left"><code>void</code></td><td align="left"><code>Consumer</code></td><td align="left"><code>T -&gt; void</code></td></tr><tr><td align="center"><code>collect</code></td><td align="left">终端</td><td align="left"><code>R</code></td><td align="left"><code>Collector</code></td><td align="left"></td></tr><tr><td align="center"><code>reduce</code></td><td align="left">终端</td><td align="left"><code>Optional</code></td><td align="left"><code>BinaryOperator</code></td><td align="left"><code>(T, T) -&gt; T</code></td></tr><tr><td align="center"><code>count</code></td><td align="left">终端</td><td align="left"><code>long</code></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="Collector-收集"><a href="#Collector-收集" class="headerlink" title="Collector 收集"></a>Collector 收集</h2><p>收集器用来将经过筛选、映射的流进行最后的整理，可以使得最后的结果以不同的形式展现。<br><code>collect</code> 方法即为收集器，它接收 <code>Collector</code> 接口的实现作为具体收集器的收集方法。<br><code>Collector</code> 接口提供了很多默认实现的方法，我们可以直接使用它们格式化流的结果；也可以自定义 <code>Collector</code> 接口的实现，从而定制自己的收集器。</p><h3 id="归约-1"><a href="#归约-1" class="headerlink" title="归约"></a>归约</h3><p>流由一个个元素组成，归约就是将一个个元素“折叠”成一个值，如求和、求最值、求平均值都是归约操作。</p><h3 id="一般性归约"><a href="#一般性归约" class="headerlink" title="一般性归约"></a>一般性归约</h3><p>若你需要自定义一个归约操作，那么需要使用 <code>Collectors.reducing</code> 函数，该函数接收三个参数：</p><ul><li>第一个参数为归约的初始值</li><li>第二个参数为归约操作进行的字段</li><li>第三个参数为归约操作的过程</li></ul><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p>Collectors类专门为汇总提供了一个工厂方法：<code>Collectors.summingInt</code>。<br>它可接受一 个把对象映射为求和所需int的函数，并返回一个收集器；该收集器在传递给普通的 <code>collect</code> 方法后即执行我们需要的汇总操作。</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>数据分组是一种更自然的分割数据操作，分组就是将流中的元素按照指定类别进行划分，类似于SQL语句中的 <code>GROUPBY</code>。</p><h3 id="多级分组"><a href="#多级分组" class="headerlink" title="多级分组"></a>多级分组</h3><p>多级分组可以支持在完成一次分组后，分别对每个小组再进行分组。<br>使用具有两个参数的 <code>groupingBy</code> 重载方法即可实现多级分组。</p><ul><li>第一个参数：一级分组的条件</li><li>第二个参数：一个新的 <code>groupingBy</code> 函数，该函数包含二级分组的条件</li></ul><p><strong>Collectors 类的静态工厂方法</strong></p><table><thead><tr><th align="center">工厂方法</th><th align="left">返回类型</th><th align="left">用途</th><th align="left">示例</th></tr></thead><tbody><tr><td align="center"><code>toList</code></td><td align="left"><code>List</code></td><td align="left">把流中所有项目收集到一个 List</td><td align="left"><code>List projects = projectStream.collect(toList());</code></td></tr><tr><td align="center"><code>toSet</code></td><td align="left"><code>Set</code></td><td align="left">把流中所有项目收集到一个 Set，删除重复项</td><td align="left"><code>Set projects = projectStream.collect(toSet());</code></td></tr><tr><td align="center"><code>toCollection</code></td><td align="left"><code>Collection</code></td><td align="left">把流中所有项目收集到给定的供应源创建的集合</td><td align="left"><code>Collection projects = projectStream.collect(toCollection(), ArrayList::new);</code></td></tr><tr><td align="center"><code>counting</code></td><td align="left"><code>Long</code></td><td align="left">计算流中元素的个数</td><td align="left"><code>long howManyProjects = projectStream.collect(counting());</code></td></tr><tr><td align="center"><code>summingInt</code></td><td align="left"><code>Integer</code></td><td align="left">对流中项目的一个整数属性求和</td><td align="left"><code>int totalStars = projectStream.collect(summingInt(Project::getStars));</code></td></tr><tr><td align="center"><code>averagingInt</code></td><td align="left"><code>Double</code></td><td align="left">计算流中项目 Integer 属性的平均值</td><td align="left"><code>double avgStars = projectStream.collect(averagingInt(Project::getStars));</code></td></tr><tr><td align="center"><code>summarizingInt</code></td><td align="left"><code>IntSummaryStatistics</code></td><td align="left">收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值</td><td align="left"><code>IntSummaryStatistics projectStatistics = projectStream.collect(summarizingInt(Project::getStars));</code></td></tr><tr><td align="center"><code>joining</code></td><td align="left"><code>String</code></td><td align="left">连接对流中每个项目调用 toString 方法所生成的字符串</td><td align="left"><code>String shortProject = projectStream.map(Project::getName).collect(joining(&quot;, &quot;));</code></td></tr><tr><td align="center"><code>maxBy</code></td><td align="left"><code>Optional</code></td><td align="left">按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty()</td><td align="left"><code>Optional fattest = projectStream.collect(maxBy(comparingInt(Project::getStars)));</code></td></tr><tr><td align="center"><code>minBy</code></td><td align="left"><code>Optional</code></td><td align="left">按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty()</td><td align="left"><code>Optional fattest = projectStream.collect(minBy(comparingInt(Project::getStars)));</code></td></tr><tr><td align="center"><code>reducing</code></td><td align="left">归约操作产生的类型</td><td align="left">从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值</td><td align="left"><code>int totalStars = projectStream.collect(reducing(0, Project::getStars, Integer::sum));</code></td></tr><tr><td align="center"><code>collectingAndThen</code></td><td align="left">转换函数返回的类型</td><td align="left">包含另一个收集器，对其结果应用转换函数</td><td align="left"><code>int howManyProjects = projectStream.collect(collectingAndThen(toList(), List::size));</code></td></tr><tr><td align="center"><code>groupingBy</code></td><td align="left"><code>Map&gt;</code></td><td align="left">根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键</td><td align="left"><code>Map&gt; projectByLanguage = projectStream.collect(groupingBy(Project::getLanguage));</code></td></tr><tr><td align="center"><code>partitioningBy</code></td><td align="left"><code>Map&gt;</code></td><td align="left">根据对流中每个项目应用断言的结果来对项目进行分区</td><td align="left"><code>Map&gt; vegetarianDishes = projectStream.collect(partitioningBy(Project::isVegetarian));</code></td></tr></tbody></table><h3 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h3><p>有一些收集器可以生成其他集合。比如前面已经见过的 <code>toList</code>，生成了 <code>java.util.List</code> 类的实例。<br>还有 <code>toSet</code> 和 <code>toCollection</code>，分别生成 <code>Set</code> 和 <code>Collection</code> 类的实例。<br>到目前为止， 我已经讲了很多流上的链式操作，但总有一些时候，需要最终生成一个集合——比如：</p><ul><li>已有代码是为集合编写的，因此需要将流转换成集合传入；</li><li>在集合上进行一系列链式操作后，最终希望生成一个值；</li><li>写单元测试时，需要对某个具体的集合做断言。</li></ul><p>使用 <code>toCollection</code>，用定制的集合收集元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.collect(toCollection(TreeSet::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><p>还可以利用收集器让流生成一个值。 <code>maxBy</code> 和 <code>minBy</code> 允许用户按某种特定的顺序生成一个值。</p><h3 id="数据分区"><a href="#数据分区" class="headerlink" title="数据分区"></a>数据分区</h3><p>分区是分组的特殊情况：由一个断言（返回一个布尔值的函数）作为分类函数，它称分区函数。<br>分区函数返回一个布尔值，这意味着得到的分组 <code>Map</code> 的键类型是 <code>Boolean</code>，于是它最多可以分为两组: true是一组，false是一组。</p><p>分区的好处在于保留了分区函数返回true或false的两套流元素列表。</p><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>并行流就是一个把内容分成多个数据块，并用不不同的线程分别处理每个数据块的流。最后合并每个数据块的计算结果。</p><p>将一个顺序执行的流转变成一个并发的流只要调用 <code>parallel()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">parallelSum</span><span class="params">(<span class="type">long</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>, i -&gt; i +<span class="number">1</span>).limit(n).parallel().reduce(<span class="number">0L</span>,Long::sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个并发流转成顺序的流只要调用 <code>sequential()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.parallel().filter(...).sequential().map(...).parallel().reduce();</span><br></pre></td></tr></table></figure><p>这两个方法可以多次调用，只有最后一个调用决定这个流是顺序的还是并发的。</p><p>并发流使用的默认线程数等于你机器的处理器核心数。</p><p>通过这个方法可以修改这个值，这是全局属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;java.util.concurrent.ForkJoinPool.common.parallelism&quot;</span>, <span class="string">&quot;12&quot;</span>);</span><br></pre></td></tr></table></figure><p>并非使用多线程并行流处理数据的性能一定高于单线程顺序流的性能，因为性能受到多种因素的影响。<br>如何高效使用并发流的一些建议：</p><ol><li>如果不确定， 就自己测试。</li><li>尽量使用基本类型的流 IntStream, LongStream, DoubleStream</li><li>有些操作使用并发流的性能会比顺序流的性能更差，比如limit，findFirst，依赖元素顺序的操作在并发流中是极其消耗性能的。findAny的性能就会好很多，应为不依赖顺序。</li><li>考虑流中计算的性能(Q)和操作的性能(N)的对比, Q表示单个处理所需的时间，N表示需要处理的数量，如果Q的值越大, 使用并发流的性能就会越高。</li><li>数据量不大时使用并发流，性能得不到提升。</li><li>考虑数据结构：并发流需要对数据进行分解，不同的数据结构被分解的性能时不一样的。</li></ol><p><strong>流的数据源和可分解性</strong></p><table><thead><tr><th align="center">源</th><th align="left">可分解性</th></tr></thead><tbody><tr><td align="center"><code>ArrayList</code></td><td align="left">非常好</td></tr><tr><td align="center"><code>LinkedList</code></td><td align="left">差</td></tr><tr><td align="center"><code>IntStream.range</code></td><td align="left">非常好</td></tr><tr><td align="center"><code>Stream.iterate</code></td><td align="left">差</td></tr><tr><td align="center"><code>HashSet</code></td><td align="left">好</td></tr><tr><td align="center"><code>TreeSet</code></td><td align="left">好</td></tr></tbody></table><p><strong>流的特性以及中间操作对流的修改都会对数据对分解性能造成影响。 比如固定大小的流在任务分解的时候就可以平均分配，但是如果有filter操作，那么流就不能预先知道在这个操作后还会剩余多少元素。</strong></p><p><strong>考虑终端操作的性能：如果终端操作在合并并发流的计算结果时的性能消耗太大，那么使用并发流提升的性能就会得不偿失。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux升级Python</title>
      <link href="/post/1669005686363.html"/>
      <url>/post/1669005686363.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">weget https://www.python.org/ftp/python/<span class="number">3.9</span>.<span class="number">7</span>/Python<span class="literal">-3</span>.<span class="number">9.7</span>.tgz</span><br><span class="line">tar <span class="literal">-zvxf</span> Python<span class="literal">-3</span>.<span class="number">9.7</span>.tgz</span><br><span class="line"><span class="comment"># 进入解压后的文件夹：</span></span><br><span class="line"><span class="built_in">cd</span> Python<span class="literal">-3</span>.<span class="number">9.7</span></span><br><span class="line"><span class="comment"># 安装GUN C编译器</span></span><br><span class="line">yum install gcc</span><br><span class="line"><span class="comment"># 执行 </span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># make 编译源码</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 执行make isntall 安装</span></span><br><span class="line">make isntall</span><br><span class="line"><span class="comment"># 安装过程中报错zipimport.ZipImportError: can&#x27;t decompress data; zlib not available解决办法：执行yum -y install zlib* 安装所需依赖</span></span><br><span class="line"><span class="comment"># 备份原有配置，设置python默认版本号为3.x</span></span><br><span class="line"><span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak</span><br><span class="line"><span class="comment"># 再执行：</span></span><br><span class="line">ln <span class="literal">-s</span> /usr/local/bin/python3 /usr/bin/python</span><br><span class="line"><span class="comment"># 最后，执行python -V验证，如图版本变成了3.x</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PyGithub上传图片</title>
      <link href="/post/1668929158828.html"/>
      <url>/post/1668929158828.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用PyGithub上传图片"><a href="#使用PyGithub上传图片" class="headerlink" title="使用PyGithub上传图片"></a>使用PyGithub上传图片</h1><blockquote><p>使用到的 Github Api <a href="https://docs.github.com/en/rest/repos/contents#create-or-update-file-contents">Create or update file contents</a></p></blockquote><p>在使用pyGithub模块的<code>create_file()</code>函数上传时<code>content</code>只接受base64和byte类型的数据</p><p>实际上把图片转换成base64编码后用pyGithub上传会变成base64文本并不是图片，可能是pyGithub代码里面还做了编码处理吧，使用Api上传时用base64是没问题的，用pyGithub那就转成byte上传</p><p>上传图片例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> github <span class="keyword">import</span> Github</span><br><span class="line"></span><br><span class="line">g=Github(<span class="string">&quot;Git Token&quot;</span>)</span><br><span class="line">repo=g.get_repo(<span class="string">&quot;Repo&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&quot;Image.png&quot;</span></span><br><span class="line">message = <span class="string">&quot;Commit Message&quot;</span></span><br><span class="line">branch = <span class="string">&quot;master&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> image:</span><br><span class="line">    f = image.read()</span><br><span class="line">    image_data = <span class="built_in">bytearray</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_image</span>(<span class="params">path,commit_message,content,branch,update=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> update:</span><br><span class="line">        contents = repo.get_contents(path, ref=branch)</span><br><span class="line">        repo.update_file(contents.path, commit_message, content, sha=contents.sha, branch)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        repo.create_file(path, commit_message, content, branch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push_image(file_path,message, <span class="built_in">bytes</span>(image_data), branch, update=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> example </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html引入iconfont图标</title>
      <link href="/post/1668785634000.html"/>
      <url>/post/1668785634000.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入iconfont图标"><a href="#引入iconfont图标" class="headerlink" title="引入iconfont图标"></a>引入iconfont图标</h1><p>可以在<a href="https://www.iconfont.cn/">www.iconfont</a>寻找我们需要的图标</p><p><img src="/img/16688441114401668844111260.png"></p><p><img src="/img/16688441424311668844141775.png"></p><p><img src="/img/16688441744701668844174456.png"></p><p><img src="/img/16688442154311668844214614.png"></p><p><strong>添加到Style</strong></p><p><strong>然后定义以下样式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.iconfont&#123;</span><br><span class="line">    font-family:&quot;iconfont&quot; !important;</span><br><span class="line">    font-size:16px;font-style:normal;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -webkit-text-stroke-width: 0.2px;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后在需要的地方插入即可</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span>𐀵<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习项目</title>
      <link href="/post/1668784645000.html"/>
      <url>/post/1668784645000.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Demo"><a href="#SpringBoot-Demo" class="headerlink" title="SpringBoot Demo"></a>SpringBoot Demo</h1><p>需要集成什么功能时可以来看看😍 </p><blockquote><p><a href="https://gitee.com/xkcoding/spring-boot-demo">Gitee</a></p></blockquote><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p><code>spring boot demo</code> 是一个用来深度学习并实战 <code>spring boot</code> 的项目，目前总共包含 <strong><code>66</code></strong> 个集成demo，已经完成 <strong><code>55</code></strong> 个。</p><p>该项目已成功集成 actuator(<code>监控</code>)、admin(<code>可视化监控</code>)、logback(<code>日志</code>)、aopLog(<code>通过AOP记录web请求日志</code>)、统一异常处理(<code>json级别和页面级别</code>)、freemarker(<code>模板引擎</code>)、thymeleaf(<code>模板引擎</code>)、Beetl(<code>模板引擎</code>)、Enjoy(<code>模板引擎</code>)、JdbcTemplate(<code>通用JDBC操作数据库</code>)、JPA(<code>强大的ORM框架</code>)、mybatis(<code>强大的ORM框架</code>)、通用Mapper(<code>快速操作Mybatis</code>)、PageHelper(<code>通用的Mybatis分页插件</code>)、mybatis-plus(<code>快速操作Mybatis</code>)、BeetlSQL(<code>强大的ORM框架</code>)、upload(<code>本地文件上传和七牛云文件上传</code>)、redis(<code>缓存</code>)、ehcache(<code>缓存</code>)、email(<code>发送各种类型邮件</code>)、task(<code>基础定时任务</code>)、quartz(<code>动态管理定时任务</code>)、xxl-job(<code>分布式定时任务</code>)、swagger(<code>API接口管理测试</code>)、security(<code>基于RBAC的动态权限认证</code>)、SpringSession(<code>Session共享</code>)、Zookeeper(<code>结合AOP实现分布式锁</code>)、RabbitMQ(<code>消息队列</code>)、Kafka(<code>消息队列</code>)、websocket(<code>服务端推送监控服务器运行信息</code>)、socket.io(<code>聊天室</code>)、ureport2(<code>中国式报表</code>)、打包成<code>war</code>文件、集成 ElasticSearch(<code>基本操作和高级查询</code>)、Async(<code>异步任务</code>)、集成Dubbo(<code>采用官方的starter</code>)、MongoDB(<code>文档数据库</code>)、neo4j(<code>图数据库</code>)、docker(<code>容器化</code>)、<code>JPA多数据源</code>、<code>Mybatis多数据源</code>、<code>代码生成器</code>、GrayLog(<code>日志收集</code>)、JustAuth(<code>第三方登录</code>)、LDAP(<code>增删改查</code>)、<code>动态添加/切换数据源</code>、单机限流(<code>AOP + Guava RateLimiter</code>)、分布式限流(<code>AOP + Redis + Lua</code>)、ElasticSearch 7.x(<code>使用官方 Rest High Level Client</code>)、HTTPS、Flyway(<code>数据库初始化</code>)、UReport2(<code>中国式复杂报表</code>)。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Fiddler在WSA上抓包</title>
      <link href="/post/1668783423000.html"/>
      <url>/post/1668783423000.html</url>
      
        <content type="html"><![CDATA[<h1 id="用Fiddler在WSA上抓包"><a href="#用Fiddler在WSA上抓包" class="headerlink" title="用Fiddler在WSA上抓包"></a>用Fiddler在WSA上抓包</h1><h2 id="Fiddler设置"><a href="#Fiddler设置" class="headerlink" title="Fiddler设置"></a>Fiddler设置</h2><p><strong>抓取 HTTPS 和 HTTPS 解密</strong></p><p><img src="/img/16688466414321668846640951.png"></p><p><strong>配置 代理端口 和 勾选 <strong><strong>Allow remote computers to connect</strong></strong> 以允许远程计算机连接 Fiddler 的代理服务器。</strong><img src="/img/16688466654331668846664974.png"></p><h2 id="配置WSA"><a href="#配置WSA" class="headerlink" title="配置WSA"></a>配置WSA</h2><p><strong>WSA 联网的原理和其他的虚拟机是一样的，都是通过一个“虚拟出来的 Wifi 连接”联网的。</strong></p><p><strong>因此只要给这个 Wifi 设置代理，就可以抓取所有 APP 的数据包了。</strong></p><p><strong>要打开 WSA 的 Wifi 设置页面，你可以用 ADB 指令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.android.settings/com.android.settings.Settings</span><br></pre></td></tr></table></figure><p><strong>也可以用一个比较受欢迎的工具箱</strong><a href="https://github.com/makazeu/WsaToolbox">WSAToolBox</a>。</p><p><strong>或者使用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># setting the proxy</span><br><span class="line">adb shell &quot;settings put global http_proxy `ip route list match 0 table all scope global | cut -F3`:8888&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Disabling the network proxy</span><br><span class="line">adb shell settings put global http_proxy :0</span><br></pre></td></tr></table></figure><p><strong>为了避免 Windows 程序的数据包刷屏，可以点一下 Fiddler 左下角的 Capturing，让它不再显示，这个开关不影响远程连接，只会不再捕获 Windows 程序的数据包。</strong></p><h1 id="抓取-HTTPS-包"><a href="#抓取-HTTPS-包" class="headerlink" title="抓取 HTTPS 包"></a>抓取 HTTPS 包</h1><p><strong>至此，虽然可以通过 Fiddler 进行抓包，但是你的 App 很可能处于“断网状态”。而且 Fiddler 也无法看到数据包的明文。这是因为目前大多数 App 都已经通过 HTTPS 协议进行通讯。</strong></p><p><strong>HTTPS 的出现就是为了解决 HTTP 明文传输，容易被中间人查看、修改数据造成的信任问题，刚好 Fiddler 就是这样的中间人角色。</strong></p><p><strong>要让 Fiddler 能够看到 APP 发出的数据包的明文，需要安装 Fiddler 的根证书。</strong></p><blockquote><p><em>在高版本 Android 上安装根证书是比较麻烦的。在 Android 7 以下的版本，只需要在设置里安装一下就可以了。从 Android 7 开始，证书会被分为系统证书和用户证书，而且 App 默认是不信任用户安装的证书的。要把证书安装到系统证书，需要获得 <strong><strong>&#x2F;system</strong> 的读写权限，把证书写入到 <strong>&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts</strong> 中</strong></em>。</p><p><em>网上有很多安装系统根证书的教程，但是可能不适用于 WSA(我试过一些教程，但是失败了)。所以我推荐一种新的方法，那就是使用 <strong><a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">MagiskTrustUserCerts</a>。这个 Magisk 模块会在每次开机时把用户证书移动到系统证书里。也就是说，使用这个模块之后，只需要安装用户证书，然后重启，用户证书就变成系统证书从而被所有 App 信任了</strong></em>。</p></blockquote><p><strong>在WSA浏览器输入 <code>http://127.0.0.1:8888</code> 下载证书安装然后重启手机即可</strong></p><h2 id="解决-SSL-Pinning"><a href="#解决-SSL-Pinning" class="headerlink" title="解决 SSL Pinning"></a>解决 SSL Pinning</h2><p><strong>不少 APP 都使用了 SSL Pinning，也就是只信任自己设置的根证书，那么上面设置的系统根证书就对这个 APP 无效了。</strong><br><strong>要绕开这个限制，可以使用一个 Xposed 模块，</strong><a href="https://github.com/Fuzion24/JustTrustMe">JustTrustMe</a>。</p><p><strong>装好 JustTrustMe 后，在LSPosed 里启用它，就可以抓取大多数 APP 数据包并进行分析了。</strong></p><blockquote><p><strong>最后抓完包记得关闭代理</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSA </tag>
            
            <tag> Httpcapture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11安装安卓子系统</title>
      <link href="/post/1668782519000.html"/>
      <url>/post/1668782519000.html</url>
      
        <content type="html"><![CDATA[<h1 id="Win11安装安卓子系统"><a href="#Win11安装安卓子系统" class="headerlink" title="Win11安装安卓子系统"></a>Win11安装安卓子系统</h1><h2 id="一、电脑及硬件准备"><a href="#一、电脑及硬件准备" class="headerlink" title="一、电脑及硬件准备"></a>一、电脑及硬件准备</h2><p><strong>首先，确保系统已开启虚拟化和 WSL 相关功能</strong>：</p><p><strong>在开始菜单中搜索并运行「启用或关闭 Windows 功能」找到并开启 Hyper-V 和「适用于 Linux 的 Windows 子系统」选项</strong></p><p><img src="/img/16688468814311668846881411.png"></p><p><strong>然后重启</strong></p><h2 id="配置WSL（适用于windows的Linux子系统）"><a href="#配置WSL（适用于windows的Linux子系统）" class="headerlink" title="配置WSL（适用于windows的Linux子系统）"></a>配置WSL（适用于windows的Linux子系统）</h2><p><strong>输入以下命令来安装</strong><code>Ubuntu</code> 子系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d Ubuntu</span><br></pre></td></tr></table></figure><p><strong>然后设置好子系统的用户名和密码</strong></p><p><strong>也可以从</strong><code>Microsoft Store</code>下载</p><h2 id="Ubuntu-中进行-WSA-安装包编译"><a href="#Ubuntu-中进行-WSA-安装包编译" class="headerlink" title="Ubuntu 中进行 WSA 安装包编译"></a><strong>Ubuntu 中进行 WSA 安装包编译</strong></h2><p><strong>将 MagiskOnWSALocal 项目克隆至本地，在打开的Ubuntu中输入指令然后回车：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LSPosed/MagiskOnWSALocal</span><br></pre></td></tr></table></figure><p><strong>跳转至本地 MoWL 目录，输入指令：</strong></p><blockquote><p><strong>cd MagiskOnWSALocal</strong></p></blockquote><p><strong>执行安装包定制脚本，输入指令：(可能需要外网)</strong></p><blockquote><p><strong>scripts&#x2F;run.sh</strong></p></blockquote><p><strong>确认密码然后执行指令。</strong></p><p><strong>下载完成后，系统自动跳到以下页面，选择Magisk 的架构（主要是 x64），如果是ARM主板选第二个。</strong></p><p><img src="/img/16688469394311668846939325.png"></p><p><strong>选择 GApps版本，一般选择第一个，稳定渠道</strong></p><ul><li><strong>( )retail Stable Channel 稳定渠道</strong></li><li><strong>( )release preview Release Preview Channel 发布预览渠道</strong></li><li><strong>( )insider slow Beta Channel 测试渠道</strong></li><li><strong>( ) nsider fast Dev Channe 开发者渠道</strong></li></ul><p><img src="/img/16688469574311668846956979.png"></p><p><strong>选择Magisk 版本，一般选择第一个，稳定渠道</strong></p><ul><li><strong>(*) stable Stable Channel 稳定渠道</strong></li><li><strong>( ) beta Beta Channel 测试渠道</strong></li><li><strong>( ) canary Canary Channel 金丝雀渠道</strong></li><li><strong>( ) debug Canary Channel Debug Build 金丝雀渠道调试版本</strong></li></ul><p><img src="/img/16688469864371668846985565.png"></p><p><strong>确认安装 GApps，选择Yes回车</strong></p><p><img src="/img/16688470044311668847004064.png"></p><p>选择你要的安装 GApp，使用 OpenGApps 可能会导致某些应用程序崩溃，推荐<strong><strong>MindTheGApps。</strong></strong></p><p><img src="/img/16688470854311668847084772.png"></p><p><strong>选择root 解决方案</strong></p><p><img src="/img/16688470854311668847084772.png"></p><p><strong>是否压缩输出</strong></p><p><img src="/img/16688471304361668847130201.png"></p><p><strong>输入Linux账号密码，执行输出。</strong></p><p><strong>命令执行完成，压缩包在MagiskOnWSA\output中</strong></p><p><strong>一般在我的电脑，打开Linux，选择Linux系统，在选择home，用户名，打开agiskOnWSA，压缩包就在output文件夹中，可以复制出来桌面来。</strong></p><p><img src="/img/16688471724411668847171900.png"></p><h2 id="安装模拟器及谷歌应用"><a href="#安装模拟器及谷歌应用" class="headerlink" title="安装模拟器及谷歌应用"></a>安装模拟器及谷歌应用</h2><p><strong>首先需要打开win11的开发模式，非官方包是无法直接安装的，所以我们需要先打开任意源安装应用。</strong></p><p><strong>打开系统设置，进入隐私和安全性，勾选开发人员模式，在弹出的窗口中确认是。</strong></p><p><img src="/img/16688472094411668847208501.png"></p><p><strong>解压</strong><code>WSA-with-magisk-stable-MindTheGapps_2208.40000.5.0_x64_Release-Nightly.7z</code>   到一个你认为合适的位置</p><p><strong>打开</strong><code>powershell(管理员方式打开)</code> 输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PowerShell.exe -ExecutionPolicy Bypass -File .\Install.ps1</span><br></pre></td></tr></table></figure><h2 id="运行谷歌商店"><a href="#运行谷歌商店" class="headerlink" title="运行谷歌商店"></a>运行谷歌商店</h2><p><strong>上面步骤运行完成后，自动打开WSL和Play 商店和 Magisk 将会自动打开。</strong></p><blockquote><p><strong>如果你想对 WSA 和 Magisk 进行更新，删除Linux系统的 MagiskOnWSALocal\download 目录然后重新运行 run.sh 脚本即可获取新版本，最后只需将新版本安装包覆盖到现有 WSA 目录并重新执行 Install.ps1 即可保留数据进行升级。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录介绍</title>
      <link href="/post/1668780849000.html"/>
      <url>/post/1668780849000.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688538997636491095178342eeb6415aaad59f18988.png"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br>这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br>该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>&#x2F;etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 &#x2F;bin&#x2F;ls 目录下的。</p><p>值得提出的是，&#x2F;bin, &#x2F;usr&#x2F;bin 是给系统用户使用的指令（除root外的通用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。</p><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装JDK</title>
      <link href="/post/1668780731000.html"/>
      <url>/post/1668780731000.html</url>
      
        <content type="html"><![CDATA[<h4 id="centos的yum安装版"><a href="#centos的yum安装版" class="headerlink" title="centos的yum安装版"></a>centos的yum安装版</h4><p>检查jdk并安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum search java|grep jdk</span><br><span class="line">yum <span class="literal">-y</span> install java<span class="literal">-1</span>.<span class="number">8.0</span><span class="literal">-openjdk</span>*</span><br></pre></td></tr></table></figure><p>如果只是使用安装这个就可以了<code>java-1.8.0-openjdk.x86_64</code>, 其他的.src、.demo啥的，可以不安装。</p><p>如果安装错版本了，可以这样修改：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> <span class="literal">-b</span> /usr/lib/jvm/java<span class="literal">-1</span>.<span class="number">7.0</span><span class="literal">-openjdk-1</span>.<span class="number">7.0</span>.<span class="number">131</span><span class="literal">-2</span>.<span class="number">6.9</span>.<span class="number">0</span>.el7_3.x86_64/bin/javac /etc/alternatives/javac</span><br><span class="line">ln <span class="literal">-s</span> <span class="literal">-b</span> /usr/lib/jvm/java<span class="literal">-1</span>.<span class="number">7.0</span><span class="literal">-openjdk-1</span>.<span class="number">7.0</span>.<span class="number">131</span><span class="literal">-2</span>.<span class="number">6.9</span>.<span class="number">0</span>.el7_3.x86_64/jre/bin/java /etc/alternatives/java</span><br></pre></td></tr></table></figure><p>这种方式安装完就可以用了。不需要配置其他的，测试下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">iZbp1dayz92se</span> ~]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_201-debug&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_201<span class="literal">-debug-b09</span>)</span><br><span class="line">OpenJDK <span class="number">64</span><span class="literal">-Bit</span> Server VM (build <span class="number">25.201</span><span class="literal">-b09-debug</span>, mixed mode)</span><br><span class="line">[<span class="type">root</span>@<span class="type">iZbp1dayz92se</span> ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h4 id="解压安装版"><a href="#解压安装版" class="headerlink" title="解压安装版"></a>解压安装版</h4><ul><li>1.从Oracle官网上下载Linux x64版本的jdk-8u201-linux-x64.tar.gz文件，还是百度jdk，然后进入jdk的Oracle网站。</li><li>2.将文件上传到linux服务器上，并解压<code>tar -zxv -f jdk-8u201-linux-x64.tar.gz</code>.</li><li>3.解压后文件目录为&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_201。我们需要配置环境变量。</li></ul><p><code>vi /etc/profile</code> :</p><p>找个合适的位置把这些东西保存下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_201</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/jre/lib/ext:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><ul><li>输入以下命令是配置生效：<code>source /etc/profile</code></li><li>用<code>java –version</code>测试。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/post/1668780499000.html"/>
      <url>/post/1668780499000.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机自启 如：docker</span></span><br><span class="line">systemctl enable docker.service</span><br><span class="line"><span class="comment"># 查看是否设置开机自启</span></span><br><span class="line">systemctl is<span class="literal">-enabled</span> docker.service</span><br></pre></td></tr></table></figure><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p><img src="/img/16688546007649a1f6ba8c12fc261ec6a4dd87c8d1f18.png"></p><blockquote><p>chowon: 更改文件的属主</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chwon [-<span class="type">R</span>] 属主名 文件名</span><br><span class="line">chwon [-<span class="type">R</span>] 属主名:属组名 文件名</span><br></pre></td></tr></table></figure><blockquote><p>chomod: 更改文件权限</p><p>Linux 文件的基本权限就有九个，分别是 owner&#x2F;group&#x2F;others(拥有者&#x2F;组&#x2F;其他) 三种身份各有自己的 read&#x2F;write&#x2F;execute 权限。</p><p>文件的权限字符为： -rwxrwxrwx ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><ul><li>r:4 (read)</li><li>w:2 (write)</li><li>x:1 (execute)</li></ul><p>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为： <code>-rwxrwx---</code> 分数则是：</p><p>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7<br>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7<br>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0<br>所以等一下我们设定权限的变更时，该文件的权限数字就是 770。变更权限的指令 chmod 的语法是这样的：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-<span class="type">R</span>] <span class="number">770</span> 文件或目录</span><br></pre></td></tr></table></figure><h2 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h2><blockquote><p>scp命令</p><p><code>scp [可选参数] file_source file_target </code></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="literal">-1</span>： 强制scp命令使用协议ssh1</span><br><span class="line"><span class="literal">-2</span>： 强制scp命令使用协议ssh2</span><br><span class="line"><span class="literal">-4</span>： 强制scp命令只使用IPv4寻址</span><br><span class="line"><span class="literal">-6</span>： 强制scp命令只使用IPv6寻址</span><br><span class="line"><span class="literal">-B</span>： 使用批处理模式（传输过程中不询问传输口令或短语）</span><br><span class="line"><span class="literal">-C</span>： 允许压缩。（将<span class="literal">-C</span>标志传递给ssh，从而打开压缩功能）</span><br><span class="line"><span class="literal">-p</span>：保留原文件的修改时间，访问时间和访问权限。</span><br><span class="line"><span class="literal">-q</span>： 不显示传输进度条。</span><br><span class="line"><span class="literal">-r</span>： 递归复制整个目录。</span><br><span class="line"><span class="literal">-v</span>：详细方式显示输出。scp和ssh(<span class="number">1</span>)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</span><br><span class="line"><span class="literal">-c</span> cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</span><br><span class="line"><span class="operator">-F</span> ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</span><br><span class="line"><span class="literal">-i</span> identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</span><br><span class="line"><span class="literal">-l</span> limit： 限定用户所能使用的带宽，以Kbit/s为单位。</span><br><span class="line"><span class="literal">-o</span> ssh_option： 如果习惯于使用ssh_config(<span class="number">5</span>)中的参数传递方式，</span><br><span class="line"><span class="literal">-P</span> port：注意是大写的P, port是指定数据传输用到的端口号</span><br><span class="line"><span class="literal">-S</span> program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(<span class="number">1</span>)的选项。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地文件到服务器</span></span><br><span class="line">scp ./test.txt root@<span class="number">192.168</span>.<span class="number">0.0</span>:/home/</span><br><span class="line"><span class="comment"># 下载服务器文件到本地</span></span><br><span class="line">scp root@<span class="number">192.168</span>.<span class="number">0.0</span>:/home/test.txt ./test.txt</span><br></pre></td></tr></table></figure><h2 id="Firewall"><a href="#Firewall" class="headerlink" title="Firewall"></a>Firewall</h2><blockquote><p>开放端口</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">service firewalld status</span><br><span class="line"><span class="comment"># 查询对应端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--query-port</span>=<span class="number">80</span>/tcp</span><br><span class="line"><span class="comment"># 如果显示为no，开启则执行以下命令</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--add-port</span>=<span class="number">80</span>/tcp <span class="literal">--permanent</span></span><br><span class="line"><span class="comment"># 关闭端口命令</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--remove-port</span>=<span class="number">80</span>/tcp <span class="literal">--permanent</span></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--reload</span></span><br><span class="line"><span class="comment"># 查询那些端口开放</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--list-port</span></span><br><span class="line"></span><br><span class="line"><span class="literal">----------------------------------service</span> iptables<span class="literal">---------------------------</span></span><br><span class="line"><span class="comment">#开放端口命令： </span></span><br><span class="line">/sbin/iptables <span class="literal">-I</span> INPUT <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">8085</span> <span class="literal">-j</span> ACCEPT</span><br><span class="line"><span class="comment">#保存：</span></span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br><span class="line"><span class="comment">#重启服务：</span></span><br><span class="line">/etc/init.d/iptables restart</span><br><span class="line"><span class="comment">#查看端口是否开放：</span></span><br><span class="line">/sbin/iptables <span class="literal">-L</span> <span class="literal">-n</span></span><br></pre></td></tr></table></figure><blockquote><p>firewalled 命令</p><p>防火墙的各类配置文件存储在&#x2F;usr&#x2F;lib&#x2F;firewalld和&#x2F;etc&#x2F;firewalld&#x2F;中的各种xml文件里</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="literal">--zone</span> <span class="comment">#作用域</span></span><br><span class="line"><span class="literal">--add-port</span>=<span class="number">80</span>/tcp <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line"><span class="literal">--permanent</span> <span class="comment">#永久生效，没有此参数重启后失效</span></span><br><span class="line"></span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">yum install firewalld firewall<span class="literal">-config</span>  <span class="comment">##安装firewalld与图形界面</span></span><br><span class="line">firewall<span class="literal">-config</span>     <span class="comment">##打开图形界面</span></span><br><span class="line">systemctl status firewalld    <span class="comment">##查看火墙状态</span></span><br><span class="line">systemctl <span class="built_in">start</span> firewalld     <span class="comment">##开启火墙服务</span></span><br><span class="line">systemctl restart firewalld     <span class="comment">##重启启火墙服务</span></span><br><span class="line">systemctl stop firewalld      <span class="comment">##关闭火墙服务</span></span><br><span class="line">systemctl enable firewalld     <span class="comment">##开机自动开启</span></span><br><span class="line">systemctl disable firewalld    <span class="comment">##开机不自启</span></span><br><span class="line">systemctl mask firewalld       <span class="comment">##冻结火墙服务</span></span><br><span class="line">systemctl unmask firewalld    <span class="comment">##解冻火墙服务</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--state</span>          <span class="comment">##查看火墙的状态</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-default-zone</span>   <span class="comment">##查看火墙默认的域</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-active-zone</span>    <span class="comment">##查看火墙活动的域</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-zones</span>          <span class="comment">##查看火墙所有可用的域</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--list-all</span>   <span class="comment">##列出制定域的所有设置</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-services</span>       <span class="comment">##列出所有预设服务</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--list-all</span>            <span class="comment">##列出默认区域的设置</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--list-all-zones</span>      <span class="comment">##列出所有区域的设置</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--set-default-zone</span>=dmz   <span class="comment">##设置默认区域为dmz</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-source</span>=<span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">--zone</span>=trusted   <span class="comment">##添加172.25.254.44到trusted域中去</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-source</span>=<span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">--zone</span>=trusted  <span class="comment">##删除172.25.254.44到trusted域中去</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-interface</span>=eth1 <span class="literal">--zone</span>=public  <span class="comment">##删除public域中的eth1接口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-interface</span>=eth1 <span class="literal">--zone</span>=trusted    <span class="comment">##添加trusted域中一个接口eth1</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-service</span>=http    <span class="comment">##添加http服务到火墙中</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-port</span>=<span class="number">8080</span>/tcp    <span class="comment">##添加端口为8080，协议为tcp的到火墙中</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--add-service</span>=http  <span class="comment">##永久添加http到火墙中</span></span><br><span class="line">**<span class="literal">-permanent</span>参数表示永久生效设置，如果没有指定<span class="literal">-zone</span>参数，则加入默认区域</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--list-ports</span>   <span class="comment">##列出public域中端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--zone</span>=public <span class="literal">--add-port</span>=<span class="number">8080</span>/tcp  <span class="comment">##添加端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--add-port</span>=<span class="number">80</span>/tcp <span class="literal">--permanent</span>   （<span class="literal">--permanent</span>永久生效，没有此参数重启后失效）</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--zone</span>=public <span class="literal">--remove-port</span>=<span class="number">8080</span>/tcp <span class="comment">##删除端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-service</span>=ssh <span class="literal">--permanent</span>  <span class="comment">##永久添加ssh服务（添加完后重新加载一下就可以查看了）</span></span><br><span class="line">vim /etc/firewalld/zones/public.xml  <span class="comment">##编写public域的配置文件,可以加服务（本次实验添加lftp）</span></span><br><span class="line">irewall<span class="literal">-cmd</span> <span class="literal">-reload</span>   <span class="comment">##重新加载火墙，不会立即中断当前使用的服务</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--complete-reload</span>  <span class="comment">##重新加载火墙，会立即中断当前正在使用的服务</span></span><br><span class="line"></span><br><span class="line">通过firewall<span class="literal">-cmd</span> 工具，可以使用 <span class="literal">--direct</span>选项再运行时间里增加或移除链。如果不熟悉iptables,使用直接接口非常危险，因为您可能无意间导致火墙被入侵。直接端口模式适用于服务或程序，以便在运行时间内增加特定的火墙规则。直接端口模式添加的规则优先于应用。</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--get-all-rules</span>  <span class="comment">##列出规则</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--add-rule</span> ipv4 <span class="keyword">filter</span> INPUT <span class="number">2</span> <span class="literal">-s</span> <span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">22</span> <span class="literal">-j</span> ACCEPT  <span class="comment">##在filter表中的INPUT链中第二条加入允许接受tcp协议的172.25.254.44的数据包通过端口22（sshd）访问该主机</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--remove-rule</span> ipv4 <span class="keyword">filter</span> INPUT <span class="number">2</span> <span class="literal">-s</span> <span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">22</span> <span class="literal">-j</span> ACCEPT  <span class="comment">##移除</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--add-rule</span> ipv4 <span class="keyword">filter</span> INPUT <span class="number">2</span> ！ <span class="literal">-s</span> <span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">22</span> <span class="literal">-j</span> ACCEPT <span class="comment">##添加除了44主机以外的任何主机都可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/services | grep ssh  <span class="comment">##查看与ssh有关的服务信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##端口转发（地址伪装）</span></span><br><span class="line"></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-forward-port</span>=port=<span class="number">22</span>:proto=tcp:toport=<span class="number">22</span>:toaddr=<span class="number">172.25</span>.<span class="number">254.44</span> <span class="comment">##别的主机通过22端口访问该主机的时候伪装到172.25.254.44主机上（要开启伪装才可成功）</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--add-masquerade</span>  <span class="comment">##开启伪装</span></span><br><span class="line">firewall<span class="literal">-cmd--reload</span>   <span class="comment">##需要重新加载</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-forward-port</span>=port=<span class="number">22</span>:proto=tcp:toport=<span class="number">22</span>:toaddr=<span class="number">172.25</span>.<span class="number">254.44</span>  <span class="comment">##移除</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--remove-masquerade</span> <span class="comment">##关闭伪装</span></span><br><span class="line"><span class="comment">##实现路由功能（连接不同的ip进行地址伪装）</span></span><br><span class="line">在服务器上配两个网卡eth0:<span class="number">172.25</span>.<span class="number">254.144</span> eth1:<span class="number">192.168</span>.<span class="number">0.144</span></span><br><span class="line">客户端：<span class="number">192.168</span>.<span class="number">0.244</span></span><br><span class="line"></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-rich-rule</span>=<span class="string">&quot;rule family=ipv4 source address=172.25.254.144 masquerade&quot;</span>  </span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-masquerade</span>  <span class="comment">##开启伪装</span></span><br><span class="line"></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-icmptypes</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=destination<span class="literal">-unreacheable</span>  <span class="comment">##ping的时候显示目的地不可达</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-icmp-block</span>=destination<span class="literal">-unreacheable</span>  <span class="comment">##移除</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=echo_sed</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=<span class="built_in">echo</span><span class="literal">-request</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-icmp-block</span>=<span class="built_in">echo</span><span class="literal">-request</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=<span class="built_in">echo</span><span class="literal">-request</span> <span class="literal">--timeout</span>=<span class="number">5</span> <span class="comment">##</span></span><br></pre></td></tr></table></figure><h2 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追加</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;content&#x27;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose集合</title>
      <link href="/post/1668779294000.html"/>
      <url>/post/1668779294000.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用的docker-compose"><a href="#常用的docker-compose" class="headerlink" title="常用的docker-compose"></a>常用的docker-compose</h1><h2 id="PostGres"><a href="#PostGres" class="headerlink" title="PostGres"></a>PostGres</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:11.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres_node1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">postgres_123</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1110</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres_data:/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> </span><br><span class="line">  <span class="attr">postgres_data:</span></span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span>                      <span class="comment"># docker文件的版本</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span>                    <span class="comment"># 指定容器镜像就是之前拉取的redis镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-master</span>    <span class="comment"># 给这个镜像起一个别名</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span>                <span class="comment"># privileged 容器内的root拥有真正root权限，否则容器内root只是外部普通用户权限</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>                 <span class="comment"># always:表名开机自启动</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--port</span> <span class="number">6379</span> <span class="string">--requirepass</span> <span class="string">test@dbuser2019</span>  <span class="string">--appendonly</span> <span class="literal">yes</span>   <span class="comment"># 相当于执行一些命令   (--requirepass 指定redis密码  --appendonly yes 这个命令是用于开启redis数据持久化)</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span>                   <span class="comment"># 端口映射,将容器的端口映射到对应宿主机的端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span>                <span class="comment"># 数据卷的映射.因为一旦容器停止了那么里面的数据也没有.所以我们需要把这个数据文件放在外面,然后映射到容器中</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 集群配置</span></span><br><span class="line">  <span class="attr">slave1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-slave-1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">&quot;sleep 2 &amp;&amp; redis-server --slaveof 192.168.1.101 6379 --port 6380  --requirepass test@dbuser2019 --masterauth test@dbuser2019 --/sys/kernel/mm/transparent_hugepage/enabled --appendonly yes</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      - 6380:6380</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./data:/data</span></span><br><span class="line"><span class="string">      - $PWD/data/redis.conf:/redis.conf</span></span><br><span class="line"><span class="string">      - /etc/sysctl.conf:/sysctl.conf</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  slave2:</span></span><br><span class="line"><span class="string">    image: redis</span></span><br><span class="line"><span class="string">    container_name: redis-slave-2</span></span><br><span class="line"><span class="string">    privileged: true</span></span><br><span class="line"><span class="string">    restart: always</span></span><br><span class="line"><span class="string">    command: /bin/bash -c &quot;</span><span class="string">sleep</span> <span class="number">2</span> <span class="string">&amp;&amp;</span> <span class="string">redis-server</span> <span class="string">--slaveof</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span> <span class="number">6379</span> <span class="string">--port</span> <span class="number">6381</span>  <span class="string">--requirepass</span> <span class="string">test@dbuser2019</span> <span class="string">--masterauth</span> <span class="string">test@dbuser2019</span> <span class="string">--/sys/kernel/mm/transparent_hugepage/enabled</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6381</span><span class="string">:6381</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/data/redis.conf:/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/sysctl.conf:/sysctl.conf</span></span><br></pre></td></tr></table></figure><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql8:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.16</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="string">--lower_case_table_names=1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=Mysql123$</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_HOST=%</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/mysql/sql/init.sql:/docker-entrypoint-initdb.d/init.sql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/mysql/my.cnf:/etc/mysql/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">swarm_net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">phpmyadmin:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">phpmyadmin:5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">phpmyadmin</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">PMA_ARBITRARY=1</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">swarm_net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> </span><br><span class="line">  <span class="attr">mysql_data:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> </span><br><span class="line">  <span class="attr">swarm_net:</span> </span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/786744873/docker-compose-hub.git">运维一键脚本集合</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux后台运行程序</title>
      <link href="/post/1670497367521.html"/>
      <url>/post/1670497367521.html</url>
      
        <content type="html"><![CDATA[<p>如果你想要在Linux中实现后台运行程序，你可以使用 <code>nohup</code> 命令。 这个命令可以让你的程序在后台运行，即使你关闭了终端也不会停止。 为了使用这个命令，你需要在你的命令前面加上 <code>nohup</code>，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup myprogram</span><br></pre></td></tr></table></figure><p>这将会启动你的程序，并且在后台运行。</p><p>另外，你还可以使用 <code>&amp;</code> 符号来把程序放到后台运行。 例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myprogram &amp;</span><br></pre></td></tr></table></figure><p>这将会启动你的程序，并且把它放到后台运行。 你可以通过使用 <code>jobs</code> 命令来查看当前正在后台运行的程序。</p><p>请注意，如果你使用 <code>nohup</code> 命令来启动程序，那么输出会被保存到一个名为 <code>nohup.out</code> 的文件中。 如果你想要把输出重定向到其它文件，你可以使用 <code>nohup</code> 命令的 <code>-o</code> 选项，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup myprogram -o myoutput.txt</span><br></pre></td></tr></table></figure><p>这样，输出会被保存到 <code>myoutput.txt</code> 文件中，而不是 <code>nohup.out</code> 文件中。</p><p>总的来说，使用 <code>nohup</code> 命令或 <code>&amp;</code> 符号可以让你的程序在Linux中实现后台运行。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 远程Debug</title>
      <link href="/post/cec34e8d.html"/>
      <url>/post/cec34e8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="远程Debug"><a href="#远程Debug" class="headerlink" title="远程Debug"></a>远程Debug</h1><ol><li>pom添加以下配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体参数详解：</p><p>-Xdebug 通知JVM工作在DEBUG模式下；</p><p>-Xrunjdwp 通知JVM使用(Java debug wire protocol)运行调试环境。该参数同时包含了一系列的调试选项；</p><p>**transport **指定了调试数据的传送方式，dt_socket是指用SOCKET模式，另有dt_shmem指用共享内存方式，其中，dt_shmem只适用于Windows平台；</p><p>address 调试服务器的端口号，客户端用来连接服务器的端口号；</p><p>server&#x3D;y&#x2F;n VM 是否需要作为调试服务器执行；</p><p>suspend&#x3D;y&#x2F;n 是否在调试客户端建立连接之后启动 VM；</p><ol start="2"><li><p>项目打包运行</p><p><code>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar demo.jar </code></p></li><li><p>IDEA配置远程DEBUG配置</p><p>IDEA要进行远程DEBUG，需要进行配置；</p><ol><li>启动项下拉，选择 <code>Edit Configurations...</code>编辑配置</li><li>点击<code>+</code>，选择<code>Remote</code>，添加远程DEBUG配置</li><li>添加远程DEBUG配置项，Host和Port，配置后，点击<code>Apply</code>和<code>OK</code>按钮（Host：IP，Prot：5005）</li></ol></li><li><p>选择远程debug启动项，然后点击测试调试按钮启动；</p></li></ol><blockquote><p>如果打的是war包，需要两个步骤：</p><p>将 web 应用部署到 Tomcat 的 webapp 目录下</p><p>修改 Tomcat&#x2F;bin&#x2F;startup.bat 文件，在最前面加上如下代码：</p><p>SET CATALINA_OPTS&#x3D;-server -Xdebug -Xnoagent -Djava.compiler&#x3D;NONE -Xrunjdwp:transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
      <url>/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启所有容器</span></span><br><span class="line">docker restart <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-a</span> | awk <span class="string">&#x27;&#123;if (NR&gt;1)&#123;print $1&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl <span class="built_in">start</span> docker</span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker inspect [<span class="type">containesId</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># compose </span></span><br><span class="line">docker<span class="literal">-compose</span> up <span class="literal">-d</span> <span class="comment"># 后台运行</span></span><br><span class="line"><span class="literal">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs [<span class="type">OPTIONS</span>] [<span class="type">containersId</span>] </span><br><span class="line">  <span class="comment"># Options参数</span></span><br><span class="line">  <span class="literal">--details</span>: 显示更多的信息</span><br><span class="line">  <span class="literal">--follow</span>(<span class="operator">-f</span>): 跟踪实时日志</span><br><span class="line">  <span class="literal">--since</span> string: 显示自某个timestamp之后的日志，或相对时间，如<span class="number">40</span>m（即<span class="number">40</span>分钟）</span><br><span class="line">  <span class="literal">--tail</span> string: 从日志末尾显示多少行日志， 默认是all</span><br><span class="line">  <span class="literal">--timestamps</span>(<span class="literal">-t</span>): 显示时间戳</span><br><span class="line">  <span class="literal">--until</span> string: 显示自某个timestamp之前的日志，或相对时间，如<span class="number">40</span>m（即<span class="number">40</span>分钟</span><br><span class="line"><span class="comment"># 查看容器mysql 最近30分钟的日志:</span></span><br><span class="line">docker logs <span class="literal">--since</span> <span class="number">30</span>m mysql</span><br><span class="line"><span class="comment"># 查看容器mysql 某时间之后的日志：</span></span><br><span class="line">docker logs <span class="literal">-t</span> <span class="literal">--since</span>=<span class="string">&quot;2019-11-02T13:23:37&quot;</span> mysql</span><br><span class="line"><span class="comment">#查看容器mysql 某时间段日志：</span></span><br><span class="line">docker logs <span class="literal">-t</span> <span class="literal">--since</span>=<span class="string">&quot;2019-11-02T13:23:37&quot;</span> <span class="literal">--until</span> <span class="string">&quot;2019-11-03T12:23:37&quot;</span> mysql</span><br><span class="line"><span class="literal">------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker exec <span class="literal">-it</span> 容器id bashshell <span class="comment"># 进入容器后开启新的终端</span></span><br><span class="line">docker attach <span class="literal">-it</span> 容器id /bin/bash <span class="comment"># 进入容器运行时终端</span></span><br><span class="line"><span class="comment"># 容器拷贝文件到宿主</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器id:路径 目标路径</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">docker commit <span class="literal">-a</span>=<span class="string">&quot;作者&quot;</span> <span class="literal">-m</span>=<span class="string">&quot;信息&quot;</span> 容器id 镜像名:版本</span><br><span class="line"><span class="comment"># 查看卷</span></span><br><span class="line">docker vlums <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">docker save <span class="literal">-o</span> 导出名称.tar 镜像名称:版本</span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">docker load <span class="literal">-i</span> &#123;name&#125;.tar</span><br><span class="line"><span class="comment">#添加docker用户组</span></span><br><span class="line">sudo groupadd docker </span><br><span class="line"><span class="comment">#将登陆用户加入到docker用户组中</span></span><br><span class="line">sudo gpasswd <span class="literal">-a</span> <span class="variable">$USER</span> docker </span><br><span class="line"><span class="comment">#更新用户组</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>参数配置</p><p>创建容器时忘了添加参数 <code>--restart=always</code> ，当 Docker 重启时，容器未能自动启动，<br><strong>1、Docker 命令修改</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container update --restart=always 容器名字</span><br></pre></td></tr></table></figure><p><strong>2、直接改配置文件</strong></p><p>首先停止容器，不然无法修改配置文件</p><p>配置文件路径为：<code>/var/lib/docker/containers/容器ID</code></p><p>在该目录下找到一个文件 <code>hostconfig.json</code> ，找到该文件中关键字 <code>RestartPolicy</code></p><p>修改前配置：<code>&quot;RestartPolicy&quot;:&#123;&quot;Name&quot;:&quot;no&quot;,&quot;MaximumRetryCount&quot;:0&#125;</code></p><p>修改后配置：<code>&quot;RestartPolicy&quot;:&#123;&quot;Name&quot;:&quot;always&quot;,&quot;MaximumRetryCount&quot;:0&#125;</code></p><p>最后启动容器。</p><h2 id="私库"><a href="#私库" class="headerlink" title="私库"></a>私库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有images</span></span><br><span class="line">http://132.126.123.162:58335/v2/_catalog</span><br><span class="line"><span class="comment"># 获取镜像标签</span></span><br><span class="line">http://132.126.123.162:58335/v2/<span class="variable">$&#123;imageName&#125;</span>/tags/list</span><br><span class="line"><span class="comment"># 获取镜像digest **请求头加 Accept:application/vnd.docker.distribution.manifest.v2+json</span></span><br><span class="line">http://132.126.123.162:58335/v2/<span class="variable">$&#123;imagesName&#125;</span>/manifests/<span class="variable">$&#123;version&#125;</span></span><br><span class="line"><span class="comment"># 删除元数据 DELETE请求</span></span><br><span class="line">http://132.126.123.162:58335/v2/nginx/manifests/<span class="variable">$&#123;digest&#125;</span></span><br><span class="line"><span class="comment"># 彻底清除</span></span><br><span class="line">docker <span class="built_in">exec</span> registry bin/registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA修改Gradle仓库</title>
      <link href="/post/1668778275000.html"/>
      <url>/post/1668778275000.html</url>
      
        <content type="html"><![CDATA[<h2 id="更改默认的仓库位置"><a href="#更改默认的仓库位置" class="headerlink" title="更改默认的仓库位置"></a>更改默认的仓库位置</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增环境变量</span></span><br><span class="line">GRADLE_USER_HOME：仓库地址</span><br><span class="line"><span class="comment"># 在C:\Users\Lee\.m2\setting.xml添加</span></span><br><span class="line">&lt;localRepository&gt;F:\Development\maven\repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot跨域配置</title>
      <link href="/post/SpringBoot%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE.html"/>
      <url>/post/SpringBoot%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot跨域配置"><a href="#SpringBoot跨域配置" class="headerlink" title="SpringBoot跨域配置"></a>SpringBoot跨域配置</h1><h2 id="addCorsMappings存在的问题"><a href="#addCorsMappings存在的问题" class="headerlink" title="addCorsMappings存在的问题"></a>addCorsMappings存在的问题</h2><p>通过一段时间在SpringBoot使用的摸爬滚打，发现网络上的资料通常为统一配置解决跨域问题提供了两种代码，第一种比较短，是通过创建<code>MyWebMvcConfig</code>类实现<code>WebMvcConfigurer</code>接口中的<code>addCorsMappings</code>方法。</p><p>具体的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">        .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">        .maxAge(<span class="number">3600</span>)</span><br><span class="line">        .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为代码较短，作为新手自然也喜欢更加简洁的代码，这在项目开始阶段似乎能够解决问题。</p><p>但是后续如果添加自定义的拦截器（包括Spring security），<code>addCorsMappings</code>方法实现的统一跨域配置就会失效，其原因在于请求经过的先后顺序：</p><blockquote><p>当请求到来时会先进入拦截器中，而不是进入Mapping映射中，所以返回的头信息中并没有配置的跨域信息。浏览器就会报跨域异常。</p></blockquote><h2 id="第二种方法，实现一个CORS拦截器"><a href="#第二种方法，实现一个CORS拦截器" class="headerlink" title="第二种方法，实现一个CORS拦截器"></a>第二种方法，实现一个CORS拦截器</h2><p>既然请求会先进入拦截器中，那么你可以尝试“以毒攻毒”，实现一个CORS拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">//放行任意原始域。放行单个原始域。使用config.addAllowedOrigin(&quot;yourdomain.com&quot;)</span></span><br><span class="line">        config.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//放行哪些请求方式。放行任意请求方式可以使用：config.addAllowedMethod(&quot;*&quot;)</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;HEAD&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PUT&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;DELETE&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PATCH&quot;</span>);</span><br><span class="line">        <span class="comment">//放行任意请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Bean Validation</title>
      <link href="/post/1668780339000.html"/>
      <url>/post/1668780339000.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为null</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为false</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为true</td></tr><tr><td>@DecimalMax</td><td>被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</td></tr><tr><td>@DecimalMin</td><td>被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</td></tr><tr><td>@Digits</td><td>验证 Number 和 String 的构成是否合法</td></tr><tr><td>@Email</td><td>被注释的元素必须为电子邮箱地址</td></tr><tr><td>@Future</td><td>被注释的元素必须为一个将来的日期</td></tr><tr><td>@FutureOrPresent</td><td></td></tr><tr><td>@Max</td><td>被注释的元素必须为数字,值小于等于指定的最大值</td></tr><tr><td>@Min</td><td>被注释的元素必须为数字,值大于等于指定的最小值</td></tr><tr><td>@Negative</td><td>带注释的元素必须是严格的负数（0被认为是无效值。</td></tr><tr><td>@NegativeOrZero</td><td>带注释的元素必须是负数或0</td></tr><tr><td>@NotBlank</td><td>Validate that the annotated string is not {@code null} or empty. The difference to {@code NotEmpty} is that trailing whitespaces are getting ignored</td></tr><tr><td>@NotEmpty</td><td>Asserts that the annotated string, collection, map or array is not {@code null} or empty.</td></tr><tr><td>@Past</td><td>被注释的元素必须为一个过去的日期</td></tr><tr><td>@PastOrPresent</td><td></td></tr><tr><td>@Pattern</td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td>@Positive</td><td>带注释的元素必须是严格正数（0被认为是无效值）</td></tr><tr><td>@PositiveOrZero</td><td>带注释的元素必须是正数或0</td></tr><tr><td>@Size</td><td>被注释的元素大小必须在指定范围中</td></tr></tbody></table><h4 id="注-以上注解生效要配合-Valid使用"><a href="#注-以上注解生效要配合-Valid使用" class="headerlink" title="注 : 以上注解生效要配合@Valid使用"></a>注 : 以上注解生效要配合@Valid使用</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring中文文档</title>
      <link href="/post/Spring%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3.html"/>
      <url>/post/Spring%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下所有文档均包含多个版本，并支持多语言（英文及中文）。</p></blockquote><hr><ul><li><a href="https://www.docs4dev.com/docs/zh/spring-boot/1.5.9.RELEASE/reference/">Spring Boot 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference">Spring Framework 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-cloud/Edgware.SR5/reference">Spring Cloud 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-security/4.2.10.RELEASE/reference">Spring Security 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-session/1.3.4.RELEASE/reference">Spring Session 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-amqp/1.7.11.RELEASE/reference">Spring AMQP 中文文档</a></li><li>Spring Data<ul><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-jpa/1.11.18.RELEASE/reference">Spring Data JPA</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-jdbc/1.0.5.RELEASE/reference">Spring Data JDBC</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-redis/1.8.18.RELEASE/reference">Spring Data Redis</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot切换使用undertow容器</title>
      <link href="/post/springboot%E5%88%87%E6%8D%A2%E4%BD%BF%E7%94%A8undertow%E5%AE%B9%E5%99%A8.html"/>
      <url>/post/springboot%E5%88%87%E6%8D%A2%E4%BD%BF%E7%94%A8undertow%E5%AE%B9%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboot切换使用undertow容器"><a href="#springboot切换使用undertow容器" class="headerlink" title="springboot切换使用undertow容器"></a>springboot切换使用undertow容器</h1><p>一、maven引入jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认是使用的tomcat --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- undertow容器支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二、undertow的基本配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#undertow容器配置开始</span></span><br><span class="line"><span class="comment"># 是否打开 undertow 日志，默认为 false</span></span><br><span class="line"><span class="attr">server.undertow.accesslog.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 设置访问日志所在目录</span></span><br><span class="line"><span class="attr">server.undertow.accesslog.dir</span>=<span class="string">logs</span></span><br><span class="line"><span class="comment"># 指定工作者线程的 I/0 线程数，默认为 2 或者 CPU 的个数</span></span><br><span class="line"><span class="attr">server.undertow.threads.io</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 指定工作者线程个数，默认为 I/O 线程个数的 8 倍</span></span><br><span class="line"><span class="attr">server.undertow.threads.worker</span>=<span class="string">256</span></span><br><span class="line"><span class="comment"># 设置 HTTP POST 内容的最大长度，默认不做限制</span></span><br><span class="line"><span class="attr">server.undertow.max-http-post-size</span>=<span class="string">4MB</span></span><br><span class="line"><span class="comment"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理；</span></span><br><span class="line"><span class="attr">server.undertow.buffer-size</span>=<span class="string">1024</span></span><br><span class="line"><span class="comment"># 是否分配的直接内存(NIO直接分配的堆外内存)</span></span><br><span class="line"><span class="attr">server.undertow.direct-buffers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#undertow容器配置结束</span></span><br></pre></td></tr></table></figure><p>其他配置可以先看springboot的autoconfig配置类这块的配置：<br>org.springframework.boot.autoconfigure.web包下的ServerProperties、servlet、embedded的undertowxxx类<br>三、一个特别的报错警告<br>解决使用undertow容器报io.undertow.websockets.jsr -UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used<br>处理：<br>新增一个component注解的类，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UndertowPoolCustomizer</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;UndertowServletWebServerFactory&gt; &#123;&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(UndertowServletWebServerFactory factory)</span> &#123;&lt;!-- --&gt;</span><br><span class="line">        factory.addDeploymentInfoCustomizers(deploymentInfo -&gt; &#123;&lt;!-- --&gt;</span><br><span class="line">            <span class="type">WebSocketDeploymentInfo</span> <span class="variable">webSocketDeploymentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebSocketDeploymentInfo</span>();</span><br><span class="line">            webSocketDeploymentInfo.setBuffers(<span class="keyword">new</span> <span class="title class_">DefaultByteBufferPool</span>(<span class="literal">false</span>, <span class="number">1024</span>));</span><br><span class="line">            deploymentInfo.addServletContextAttribute(<span class="string">&quot;io.undertow.websockets.jsr.WebSocketDeploymentInfo&quot;</span>, webSocketDeploymentInfo);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、验证成功<br>![在这里插入图片描述]<img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688549017631668854900940.png"><a href="https://i2.wp.com/img-blog.csdnimg.cn/20201130155007178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p3cmxqNTI3,size_16,color_FFFFFF,t_70">https://i2.wp.com/img-blog.csdnimg.cn/20201130155007178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p3cmxqNTI3,size_16,color_FFFFFF,t_70</a>)<br>看到Undertow started xxx就是使用undertow容器启动成功了。<br>五、分享感觉<br>网传undertow比tomcat、jetty都快省资源，还是费阻塞nio等等，实际上可能就没有什么感觉。我其实用postman测试了以前的一些接口，感觉接口返回秒回，就是感觉快了。后来运行2天（没有配置undertow，默认配置）有点小卡，然后，早上把配置改成上面的发布，再观察几天试试。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions自动部署博客</title>
      <link href="/post/GitHub%20Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2.html"/>
      <url>/post/GitHub%20Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-Actions-自动部署-Hexo-博客"><a href="#GitHub-Actions-自动部署-Hexo-博客" class="headerlink" title="GitHub Actions 自动部署 Hexo 博客"></a>GitHub Actions 自动部署 Hexo 博客</h1><h2 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h2><h3 id="Hexo代码仓库"><a href="#Hexo代码仓库" class="headerlink" title="Hexo代码仓库"></a><strong>Hexo代码仓库</strong></h3><p><strong>存储Hexo项目源码。</strong></p><p>当Hexo仓库的 <code>master</code> 有内容 <code>push</code> 进来时（例如：主题文件，文章 md 文件、图片等）， 会触发 GitHub Actions 自动编译并部署到编译后仓库的 <code>master 分支</code>。</p><h4 id="创建-GitHub-Token"><a href="#创建-GitHub-Token" class="headerlink" title="创建 GitHub Token"></a>创建 GitHub Token</h4><p>创建一个有 <strong>repo</strong> 和 <strong>workflow</strong> 权限的 <a href="https://github.com/settings/tokens/new">GitHub Token</a>。</p><p>将上面生成的 Token 添加到Hexo仓库的 <code>Secrets</code> 里，并将这个新增的 <code>secret</code> 命名为 <code>HEXO_DEPLOY</code> 。</p><p><img src="/img/16688439174311668843916838.png"></p><blockquote><p>新创建的 secret <code>HEXO_DEPLOY</code> 在 Actions 配置文件要用到，需跟配置文件保持一致！</p></blockquote><h4 id="添加-Actions-配置文件"><a href="#添加-Actions-配置文件" class="headerlink" title="添加 Actions 配置文件"></a>添加 Actions 配置文件</h4><ol><li>在你的 Hexo 项目根目录下创建<code>.github</code> 文件夹。</li><li>在<code>.github</code> 文件夹下创建 <code>workflows</code> 文件夹。</li><li>在<code>workflows</code> 文件夹下创建 <code>hexo-deploy.yml</code> 文件。</li></ol><p><code>hexo-deploy.yml</code> 文件的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name: deploying Hexo project to GitHub pages</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master # master 分支有 push 行为时就触发这个 action</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@master</span><br><span class="line"></span><br><span class="line">      - name: Build and Deploy</span><br><span class="line">        uses: theme-keep/hexo-deploy-github-pages-action@master # 使用专门部署 Hexo 到 GitHub pages 的 action</span><br><span class="line">        env:</span><br><span class="line">          PERSONAL_TOKEN: $&#123;&#123; secrets.HEXO_DEPLOY &#125;&#125; # secret 名</span><br><span class="line">          PUBLISH_REPOSITORY: oohmygosh/oohmygosh.github.io # 公共仓库，格式：GitHub 用户名/仓库名</span><br><span class="line">          BRANCH: master # 分支</span><br></pre></td></tr></table></figure><blockquote><p>在上面的配置文件中，使用了 <a href="https://link.juejin.cn/?target=https://github.com/theme-keep">theme-keep</a> 组织封装的 <strong><a href="https://github.com/theme-keep/hexo-deploy-github-pages-action">hexo-deploy-github-pages-action</a></strong> ，是一款专门部署 Hexo 博客到 GitHub pages 的 action，欢迎大家 <a href="https://link.juejin.cn/?target=https://github.com/theme-keep/hexo-deploy-github-pages-action">Star</a> 和 <a href="https://link.juejin.cn/?target=https://github.com/theme-keep/hexo-deploy-github-pages-action">Fork</a></p></blockquote><p><strong>至此，准备工作完毕~</strong></p><h2 id="自动部署触发流程"><a href="#自动部署触发流程" class="headerlink" title="自动部署触发流程"></a>自动部署触发流程</h2><ol><li><strong>你的Hexo仓库出发push之后</strong></li><li><strong>Github Actions 检测到</strong><code>master</code> 分枝有内容 <code>push</code>进来，会自动执行action配置文件的命令，然后把Hexo项目编译成静态页面，然后部署到 <code>xxx.github.io</code>仓库的 <code>master</code>分支</li><li><strong>在Hexo库可以看到你配置的Action</strong><br><img src="/img/16688439934311668843993270.png"></li></ol><blockquote><p><strong>搭配Hexo后端可以只专注于编写博客了</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
