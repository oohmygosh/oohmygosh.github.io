<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用PyGithub上传图片</title>
      <link href="/post/1668929158828.html"/>
      <url>/post/1668929158828.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用PyGithub上传图片"><a href="#使用PyGithub上传图片" class="headerlink" title="使用PyGithub上传图片"></a>使用PyGithub上传图片</h1><blockquote><p>使用到的 Github Api <a href="https://docs.github.com/en/rest/repos/contents#create-or-update-file-contents">Create or update file contents</a></p></blockquote><p>在使用pyGithub模块的<code>create_file()</code>函数上传时<code>content</code>只接受base64和byte类型的数据</p><p>实际上把图片转换成base64编码后用pyGithub上传会变成base64文本并不是图片，可能是pyGithub代码里面还做了编码处理吧，使用Api上传时用base64是没问题的，用pyGithub那就转成byte上传</p><p>上传图片例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> github <span class="keyword">import</span> Github</span><br><span class="line"></span><br><span class="line">g=Github(<span class="string">&quot;Git Token&quot;</span>)</span><br><span class="line">repo=g.get_repo(<span class="string">&quot;Repo&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&quot;Image.png&quot;</span></span><br><span class="line">message = <span class="string">&quot;Commit Message&quot;</span></span><br><span class="line">branch = <span class="string">&quot;master&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> image:</span><br><span class="line">    f = image.read()</span><br><span class="line">    image_data = <span class="built_in">bytearray</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_image</span>(<span class="params">path,commit_message,content,branch,update=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> update:</span><br><span class="line">        contents = repo.get_contents(path, ref=branch)</span><br><span class="line">        repo.update_file(contents.path, commit_message, content, sha=contents.sha, branch)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        repo.create_file(path, commit_message, content, branch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push_image(file_path,message, <span class="built_in">bytes</span>(image_data), branch, update=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> example </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html引入iconfont图标</title>
      <link href="/post/1668785634000.html"/>
      <url>/post/1668785634000.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入iconfont图标"><a href="#引入iconfont图标" class="headerlink" title="引入iconfont图标"></a>引入iconfont图标</h1><p>可以在<a href="https://www.iconfont.cn/">www.iconfont</a>寻找我们需要的图标</p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688441114401668844111260.png"></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688441424311668844141775.png"></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688441744701668844174456.png"></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688442154311668844214614.png"></p><p><strong>添加到Style</strong></p><p><strong>然后定义以下样式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.iconfont&#123;</span><br><span class="line">    font-family:&quot;iconfont&quot; !important;</span><br><span class="line">    font-size:16px;font-style:normal;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -webkit-text-stroke-width: 0.2px;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后在需要的地方插入即可</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#x10035;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习项目</title>
      <link href="/post/1668784645000.html"/>
      <url>/post/1668784645000.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Demo"><a href="#SpringBoot-Demo" class="headerlink" title="SpringBoot Demo"></a>SpringBoot Demo</h1><p>需要集成什么功能时可以来看看😍 </p><blockquote><p><a href="https://gitee.com/xkcoding/spring-boot-demo">Gitee</a></p></blockquote><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p><code>spring boot demo</code> 是一个用来深度学习并实战 <code>spring boot</code> 的项目，目前总共包含 <strong><code>66</code></strong> 个集成demo，已经完成 <strong><code>55</code></strong> 个。</p><p>该项目已成功集成 actuator(<code>监控</code>)、admin(<code>可视化监控</code>)、logback(<code>日志</code>)、aopLog(<code>通过AOP记录web请求日志</code>)、统一异常处理(<code>json级别和页面级别</code>)、freemarker(<code>模板引擎</code>)、thymeleaf(<code>模板引擎</code>)、Beetl(<code>模板引擎</code>)、Enjoy(<code>模板引擎</code>)、JdbcTemplate(<code>通用JDBC操作数据库</code>)、JPA(<code>强大的ORM框架</code>)、mybatis(<code>强大的ORM框架</code>)、通用Mapper(<code>快速操作Mybatis</code>)、PageHelper(<code>通用的Mybatis分页插件</code>)、mybatis-plus(<code>快速操作Mybatis</code>)、BeetlSQL(<code>强大的ORM框架</code>)、upload(<code>本地文件上传和七牛云文件上传</code>)、redis(<code>缓存</code>)、ehcache(<code>缓存</code>)、email(<code>发送各种类型邮件</code>)、task(<code>基础定时任务</code>)、quartz(<code>动态管理定时任务</code>)、xxl-job(<code>分布式定时任务</code>)、swagger(<code>API接口管理测试</code>)、security(<code>基于RBAC的动态权限认证</code>)、SpringSession(<code>Session共享</code>)、Zookeeper(<code>结合AOP实现分布式锁</code>)、RabbitMQ(<code>消息队列</code>)、Kafka(<code>消息队列</code>)、websocket(<code>服务端推送监控服务器运行信息</code>)、socket.io(<code>聊天室</code>)、ureport2(<code>中国式报表</code>)、打包成<code>war</code>文件、集成 ElasticSearch(<code>基本操作和高级查询</code>)、Async(<code>异步任务</code>)、集成Dubbo(<code>采用官方的starter</code>)、MongoDB(<code>文档数据库</code>)、neo4j(<code>图数据库</code>)、docker(<code>容器化</code>)、<code>JPA多数据源</code>、<code>Mybatis多数据源</code>、<code>代码生成器</code>、GrayLog(<code>日志收集</code>)、JustAuth(<code>第三方登录</code>)、LDAP(<code>增删改查</code>)、<code>动态添加/切换数据源</code>、单机限流(<code>AOP + Guava RateLimiter</code>)、分布式限流(<code>AOP + Redis + Lua</code>)、ElasticSearch 7.x(<code>使用官方 Rest High Level Client</code>)、HTTPS、Flyway(<code>数据库初始化</code>)、UReport2(<code>中国式复杂报表</code>)。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Fiddler在WSA上抓包</title>
      <link href="/post/1668783423000.html"/>
      <url>/post/1668783423000.html</url>
      
        <content type="html"><![CDATA[<h1 id="用Fiddler在WSA上抓包"><a href="#用Fiddler在WSA上抓包" class="headerlink" title="用Fiddler在WSA上抓包"></a>用Fiddler在WSA上抓包</h1><h2 id="Fiddler设置"><a href="#Fiddler设置" class="headerlink" title="Fiddler设置"></a>Fiddler设置</h2><p><strong>抓取 HTTPS 和 HTTPS 解密</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688466414321668846640951.png"></p><p><strong>配置 代理端口 和 勾选 <strong><strong>Allow remote computers to connect</strong></strong> 以允许远程计算机连接 Fiddler 的代理服务器。</strong><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688466654331668846664974.png"></p><h2 id="配置WSA"><a href="#配置WSA" class="headerlink" title="配置WSA"></a>配置WSA</h2><p><strong>WSA 联网的原理和其他的虚拟机是一样的，都是通过一个“虚拟出来的 Wifi 连接”联网的。</strong></p><p><strong>因此只要给这个 Wifi 设置代理，就可以抓取所有 APP 的数据包了。</strong></p><p><strong>要打开 WSA 的 Wifi 设置页面，你可以用 ADB 指令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.android.settings/com.android.settings.Settings</span><br></pre></td></tr></table></figure><p><strong>也可以用一个比较受欢迎的工具箱</strong><a href="https://github.com/makazeu/WsaToolbox">WSAToolBox</a>。</p><p><strong>或者使用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># setting the proxy</span><br><span class="line">adb shell &quot;settings put global http_proxy `ip route list match 0 table all scope global | cut -F3`:8888&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Disabling the network proxy</span><br><span class="line">adb shell settings put global http_proxy :0</span><br></pre></td></tr></table></figure><p><strong>为了避免 Windows 程序的数据包刷屏，可以点一下 Fiddler 左下角的 Capturing，让它不再显示，这个开关不影响远程连接，只会不再捕获 Windows 程序的数据包。</strong></p><h1 id="抓取-HTTPS-包"><a href="#抓取-HTTPS-包" class="headerlink" title="抓取 HTTPS 包"></a>抓取 HTTPS 包</h1><p><strong>至此，虽然可以通过 Fiddler 进行抓包，但是你的 App 很可能处于“断网状态”。而且 Fiddler 也无法看到数据包的明文。这是因为目前大多数 App 都已经通过 HTTPS 协议进行通讯。</strong></p><p><strong>HTTPS 的出现就是为了解决 HTTP 明文传输，容易被中间人查看、修改数据造成的信任问题，刚好 Fiddler 就是这样的中间人角色。</strong></p><p><strong>要让 Fiddler 能够看到 APP 发出的数据包的明文，需要安装 Fiddler 的根证书。</strong></p><blockquote><p><em>在高版本 Android 上安装根证书是比较麻烦的。在 Android 7 以下的版本，只需要在设置里安装一下就可以了。从 Android 7 开始，证书会被分为系统证书和用户证书，而且 App 默认是不信任用户安装的证书的。要把证书安装到系统证书，需要获得 <strong><strong>&#x2F;system</strong> 的读写权限，把证书写入到 <strong>&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts</strong> 中</strong></em>。</p><p><em>网上有很多安装系统根证书的教程，但是可能不适用于 WSA(我试过一些教程，但是失败了)。所以我推荐一种新的方法，那就是使用 <strong><a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">MagiskTrustUserCerts</a>。这个 Magisk 模块会在每次开机时把用户证书移动到系统证书里。也就是说，使用这个模块之后，只需要安装用户证书，然后重启，用户证书就变成系统证书从而被所有 App 信任了</strong></em>。</p></blockquote><p><strong>在WSA浏览器输入 <code>http://127.0.0.1:8888</code> 下载证书安装然后重启手机即可</strong></p><h2 id="解决-SSL-Pinning"><a href="#解决-SSL-Pinning" class="headerlink" title="解决 SSL Pinning"></a>解决 SSL Pinning</h2><p><strong>不少 APP 都使用了 SSL Pinning，也就是只信任自己设置的根证书，那么上面设置的系统根证书就对这个 APP 无效了。</strong><br><strong>要绕开这个限制，可以使用一个 Xposed 模块，</strong><a href="https://github.com/Fuzion24/JustTrustMe">JustTrustMe</a>。</p><p><strong>装好 JustTrustMe 后，在LSPosed 里启用它，就可以抓取大多数 APP 数据包并进行分析了。</strong></p><blockquote><p><strong>最后抓完包记得关闭代理</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSA </tag>
            
            <tag> Httpcapture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11安装安卓子系统</title>
      <link href="/post/1668782519000.html"/>
      <url>/post/1668782519000.html</url>
      
        <content type="html"><![CDATA[<h1 id="Win11安装安卓子系统"><a href="#Win11安装安卓子系统" class="headerlink" title="Win11安装安卓子系统"></a>Win11安装安卓子系统</h1><h2 id="一、电脑及硬件准备"><a href="#一、电脑及硬件准备" class="headerlink" title="一、电脑及硬件准备"></a>一、电脑及硬件准备</h2><p><strong>首先，确保系统已开启虚拟化和 WSL 相关功能</strong>：</p><p><strong>在开始菜单中搜索并运行「启用或关闭 Windows 功能」找到并开启 Hyper-V 和「适用于 Linux 的 Windows 子系统」选项</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688468814311668846881411.png"></p><p><strong>然后重启</strong></p><h2 id="配置WSL（适用于windows的Linux子系统）"><a href="#配置WSL（适用于windows的Linux子系统）" class="headerlink" title="配置WSL（适用于windows的Linux子系统）"></a>配置WSL（适用于windows的Linux子系统）</h2><p><strong>输入以下命令来安装</strong><code>Ubuntu</code> 子系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d Ubuntu</span><br></pre></td></tr></table></figure><p><strong>然后设置好子系统的用户名和密码</strong></p><p><strong>也可以从</strong><code>Microsoft Store</code>下载</p><h2 id="Ubuntu-中进行-WSA-安装包编译"><a href="#Ubuntu-中进行-WSA-安装包编译" class="headerlink" title="Ubuntu 中进行 WSA 安装包编译"></a><strong>Ubuntu 中进行 WSA 安装包编译</strong></h2><p><strong>将 MagiskOnWSALocal 项目克隆至本地，在打开的Ubuntu中输入指令然后回车：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LSPosed/MagiskOnWSALocal</span><br></pre></td></tr></table></figure><p><strong>跳转至本地 MoWL 目录，输入指令：</strong></p><blockquote><p><strong>cd MagiskOnWSALocal</strong></p></blockquote><p><strong>执行安装包定制脚本，输入指令：(可能需要外网)</strong></p><blockquote><p><strong>scripts&#x2F;run.sh</strong></p></blockquote><p><strong>确认密码然后执行指令。</strong></p><p><strong>下载完成后，系统自动跳到以下页面，选择Magisk 的架构（主要是 x64），如果是ARM主板选第二个。</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688469394311668846939325.png"></p><p><strong>选择 GApps版本，一般选择第一个，稳定渠道</strong></p><ul><li><strong>( )retail Stable Channel 稳定渠道</strong></li><li><strong>( )release preview Release Preview Channel 发布预览渠道</strong></li><li><strong>( )insider slow Beta Channel 测试渠道</strong></li><li><strong>( ) nsider fast Dev Channe 开发者渠道</strong></li></ul><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688469574311668846956979.png"></p><p><strong>选择Magisk 版本，一般选择第一个，稳定渠道</strong></p><ul><li><strong>(*) stable Stable Channel 稳定渠道</strong></li><li><strong>( ) beta Beta Channel 测试渠道</strong></li><li><strong>( ) canary Canary Channel 金丝雀渠道</strong></li><li><strong>( ) debug Canary Channel Debug Build 金丝雀渠道调试版本</strong></li></ul><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688469864371668846985565.png"></p><p><strong>确认安装 GApps，选择Yes回车</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688470044311668847004064.png"></p><p>选择你要的安装 GApp，使用 OpenGApps 可能会导致某些应用程序崩溃，推荐<strong><strong>MindTheGApps。</strong></strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688470854311668847084772.png"></p><p><strong>选择root 解决方案</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688470854311668847084772.png"></p><p><strong>是否压缩输出</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688471304361668847130201.png"></p><p><strong>输入Linux账号密码，执行输出。</strong></p><p><strong>命令执行完成，压缩包在MagiskOnWSA\output中</strong></p><p><strong>一般在我的电脑，打开Linux，选择Linux系统，在选择home，用户名，打开agiskOnWSA，压缩包就在output文件夹中，可以复制出来桌面来。</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688471724411668847171900.png"></p><h2 id="安装模拟器及谷歌应用"><a href="#安装模拟器及谷歌应用" class="headerlink" title="安装模拟器及谷歌应用"></a>安装模拟器及谷歌应用</h2><p><strong>首先需要打开win11的开发模式，非官方包是无法直接安装的，所以我们需要先打开任意源安装应用。</strong></p><p><strong>打开系统设置，进入隐私和安全性，勾选开发人员模式，在弹出的窗口中确认是。</strong></p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688472094411668847208501.png"></p><p><strong>解压</strong><code>WSA-with-magisk-stable-MindTheGapps_2208.40000.5.0_x64_Release-Nightly.7z</code>   到一个你认为合适的位置</p><p><strong>打开</strong><code>powershell(管理员方式打开)</code> 输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PowerShell.exe -ExecutionPolicy Bypass -File .\Install.ps1</span><br></pre></td></tr></table></figure><h2 id="运行谷歌商店"><a href="#运行谷歌商店" class="headerlink" title="运行谷歌商店"></a>运行谷歌商店</h2><p><strong>上面步骤运行完成后，自动打开WSL和Play 商店和 Magisk 将会自动打开。</strong></p><blockquote><p><strong>如果你想对 WSA 和 Magisk 进行更新，删除Linux系统的 MagiskOnWSALocal\download 目录然后重新运行 run.sh 脚本即可获取新版本，最后只需将新版本安装包覆盖到现有 WSA 目录并重新执行 Install.ps1 即可保留数据进行升级。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux升级python</title>
      <link href="/post/1668780981000.html"/>
      <url>/post/1668780981000.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">weget https://www.python.org/ftp/python/<span class="number">3.9</span>.<span class="number">7</span>/Python<span class="literal">-3</span>.<span class="number">9.7</span>.tgz</span><br><span class="line">tar <span class="literal">-zvxf</span> Python<span class="literal">-3</span>.<span class="number">9.7</span>.tgz</span><br><span class="line"><span class="comment"># 进入解压后的文件夹：</span></span><br><span class="line"><span class="built_in">cd</span> Python<span class="literal">-3</span>.<span class="number">9.7</span></span><br><span class="line"><span class="comment"># 安装GUN C编译器</span></span><br><span class="line">yum install gcc</span><br><span class="line"><span class="comment"># 执行 </span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># make 编译源码</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 执行make isntall 安装</span></span><br><span class="line">make isntall</span><br><span class="line"><span class="comment"># 安装过程中报错zipimport.ZipImportError: can&#x27;t decompress data; zlib not available解决办法：执行yum -y install zlib* 安装所需依赖</span></span><br><span class="line"><span class="comment"># 备份原有配置，设置python默认版本号为3.x</span></span><br><span class="line"><span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak</span><br><span class="line"><span class="comment"># 再执行：</span></span><br><span class="line">ln <span class="literal">-s</span> /usr/local/bin/python3 /usr/bin/python</span><br><span class="line"><span class="comment"># 最后，执行python -V验证，如图版本变成了3.x</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录介绍</title>
      <link href="/post/1668780849000.html"/>
      <url>/post/1668780849000.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688538997636491095178342eeb6415aaad59f18988.png"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br>这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br>该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>&#x2F;etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 &#x2F;bin&#x2F;ls 目录下的。</p><p>值得提出的是，&#x2F;bin, &#x2F;usr&#x2F;bin 是给系统用户使用的指令（除root外的通用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。</p><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装JDK</title>
      <link href="/post/1668780731000.html"/>
      <url>/post/1668780731000.html</url>
      
        <content type="html"><![CDATA[<h4 id="centos的yum安装版"><a href="#centos的yum安装版" class="headerlink" title="centos的yum安装版"></a>centos的yum安装版</h4><p>检查jdk并安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum search java|grep jdk</span><br><span class="line">yum <span class="literal">-y</span> install java<span class="literal">-1</span>.<span class="number">8.0</span><span class="literal">-openjdk</span>*</span><br></pre></td></tr></table></figure><p>如果只是使用安装这个就可以了<code>java-1.8.0-openjdk.x86_64</code>, 其他的.src、.demo啥的，可以不安装。</p><p>如果安装错版本了，可以这样修改：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> <span class="literal">-b</span> /usr/lib/jvm/java<span class="literal">-1</span>.<span class="number">7.0</span><span class="literal">-openjdk-1</span>.<span class="number">7.0</span>.<span class="number">131</span><span class="literal">-2</span>.<span class="number">6.9</span>.<span class="number">0</span>.el7_3.x86_64/bin/javac /etc/alternatives/javac</span><br><span class="line">ln <span class="literal">-s</span> <span class="literal">-b</span> /usr/lib/jvm/java<span class="literal">-1</span>.<span class="number">7.0</span><span class="literal">-openjdk-1</span>.<span class="number">7.0</span>.<span class="number">131</span><span class="literal">-2</span>.<span class="number">6.9</span>.<span class="number">0</span>.el7_3.x86_64/jre/bin/java /etc/alternatives/java</span><br></pre></td></tr></table></figure><p>这种方式安装完就可以用了。不需要配置其他的，测试下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">iZbp1dayz92se</span> ~]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_201-debug&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_201<span class="literal">-debug-b09</span>)</span><br><span class="line">OpenJDK <span class="number">64</span><span class="literal">-Bit</span> Server VM (build <span class="number">25.201</span><span class="literal">-b09-debug</span>, mixed mode)</span><br><span class="line">[<span class="type">root</span>@<span class="type">iZbp1dayz92se</span> ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h4 id="解压安装版"><a href="#解压安装版" class="headerlink" title="解压安装版"></a>解压安装版</h4><ul><li>1.从Oracle官网上下载Linux x64版本的jdk-8u201-linux-x64.tar.gz文件，还是百度jdk，然后进入jdk的Oracle网站。</li><li>2.将文件上传到linux服务器上，并解压<code>tar -zxv -f jdk-8u201-linux-x64.tar.gz</code>.</li><li>3.解压后文件目录为&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_201。我们需要配置环境变量。</li></ul><p><code>vi /etc/profile</code> :</p><p>找个合适的位置把这些东西保存下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_201</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/jre/lib/ext:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><ul><li>输入以下命令是配置生效：<code>source /etc/profile</code></li><li>用<code>java –version</code>测试。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/post/1668780499000.html"/>
      <url>/post/1668780499000.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机自启 如：docker</span></span><br><span class="line">systemctl enable docker.service</span><br><span class="line"><span class="comment"># 查看是否设置开机自启</span></span><br><span class="line">systemctl is<span class="literal">-enabled</span> docker.service</span><br></pre></td></tr></table></figure><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688546007649a1f6ba8c12fc261ec6a4dd87c8d1f18.png"></p><blockquote><p>chowon: 更改文件的属主</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chwon [-<span class="type">R</span>] 属主名 文件名</span><br><span class="line">chwon [-<span class="type">R</span>] 属主名:属组名 文件名</span><br></pre></td></tr></table></figure><blockquote><p>chomod: 更改文件权限</p><p>Linux 文件的基本权限就有九个，分别是 owner&#x2F;group&#x2F;others(拥有者&#x2F;组&#x2F;其他) 三种身份各有自己的 read&#x2F;write&#x2F;execute 权限。</p><p>文件的权限字符为： -rwxrwxrwx ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><ul><li>r:4 (read)</li><li>w:2 (write)</li><li>x:1 (execute)</li></ul><p>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为： <code>-rwxrwx---</code> 分数则是：</p><p>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7<br>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7<br>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0<br>所以等一下我们设定权限的变更时，该文件的权限数字就是 770。变更权限的指令 chmod 的语法是这样的：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-<span class="type">R</span>] <span class="number">770</span> 文件或目录</span><br></pre></td></tr></table></figure><h2 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h2><blockquote><p>scp命令</p><p><code>scp [可选参数] file_source file_target </code></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="literal">-1</span>： 强制scp命令使用协议ssh1</span><br><span class="line"><span class="literal">-2</span>： 强制scp命令使用协议ssh2</span><br><span class="line"><span class="literal">-4</span>： 强制scp命令只使用IPv4寻址</span><br><span class="line"><span class="literal">-6</span>： 强制scp命令只使用IPv6寻址</span><br><span class="line"><span class="literal">-B</span>： 使用批处理模式（传输过程中不询问传输口令或短语）</span><br><span class="line"><span class="literal">-C</span>： 允许压缩。（将<span class="literal">-C</span>标志传递给ssh，从而打开压缩功能）</span><br><span class="line"><span class="literal">-p</span>：保留原文件的修改时间，访问时间和访问权限。</span><br><span class="line"><span class="literal">-q</span>： 不显示传输进度条。</span><br><span class="line"><span class="literal">-r</span>： 递归复制整个目录。</span><br><span class="line"><span class="literal">-v</span>：详细方式显示输出。scp和ssh(<span class="number">1</span>)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</span><br><span class="line"><span class="literal">-c</span> cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</span><br><span class="line"><span class="operator">-F</span> ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</span><br><span class="line"><span class="literal">-i</span> identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</span><br><span class="line"><span class="literal">-l</span> limit： 限定用户所能使用的带宽，以Kbit/s为单位。</span><br><span class="line"><span class="literal">-o</span> ssh_option： 如果习惯于使用ssh_config(<span class="number">5</span>)中的参数传递方式，</span><br><span class="line"><span class="literal">-P</span> port：注意是大写的P, port是指定数据传输用到的端口号</span><br><span class="line"><span class="literal">-S</span> program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(<span class="number">1</span>)的选项。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地文件到服务器</span></span><br><span class="line">scp ./test.txt root@<span class="number">192.168</span>.<span class="number">0.0</span>:/home/</span><br><span class="line"><span class="comment"># 下载服务器文件到本地</span></span><br><span class="line">scp root@<span class="number">192.168</span>.<span class="number">0.0</span>:/home/test.txt ./test.txt</span><br></pre></td></tr></table></figure><h2 id="Firewall"><a href="#Firewall" class="headerlink" title="Firewall"></a>Firewall</h2><blockquote><p>开放端口</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">service firewalld status</span><br><span class="line"><span class="comment"># 查询对应端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--query-port</span>=<span class="number">80</span>/tcp</span><br><span class="line"><span class="comment"># 如果显示为no，开启则执行以下命令</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--add-port</span>=<span class="number">80</span>/tcp <span class="literal">--permanent</span></span><br><span class="line"><span class="comment"># 关闭端口命令</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--remove-port</span>=<span class="number">80</span>/tcp <span class="literal">--permanent</span></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--reload</span></span><br><span class="line"><span class="comment"># 查询那些端口开放</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--list-port</span></span><br><span class="line"></span><br><span class="line"><span class="literal">----------------------------------service</span> iptables<span class="literal">---------------------------</span></span><br><span class="line"><span class="comment">#开放端口命令： </span></span><br><span class="line">/sbin/iptables <span class="literal">-I</span> INPUT <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">8085</span> <span class="literal">-j</span> ACCEPT</span><br><span class="line"><span class="comment">#保存：</span></span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br><span class="line"><span class="comment">#重启服务：</span></span><br><span class="line">/etc/init.d/iptables restart</span><br><span class="line"><span class="comment">#查看端口是否开放：</span></span><br><span class="line">/sbin/iptables <span class="literal">-L</span> <span class="literal">-n</span></span><br></pre></td></tr></table></figure><blockquote><p>firewalled 命令</p><p>防火墙的各类配置文件存储在&#x2F;usr&#x2F;lib&#x2F;firewalld和&#x2F;etc&#x2F;firewalld&#x2F;中的各种xml文件里</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="literal">--zone</span> <span class="comment">#作用域</span></span><br><span class="line"><span class="literal">--add-port</span>=<span class="number">80</span>/tcp <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line"><span class="literal">--permanent</span> <span class="comment">#永久生效，没有此参数重启后失效</span></span><br><span class="line"></span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">yum install firewalld firewall<span class="literal">-config</span>  <span class="comment">##安装firewalld与图形界面</span></span><br><span class="line">firewall<span class="literal">-config</span>     <span class="comment">##打开图形界面</span></span><br><span class="line">systemctl status firewalld    <span class="comment">##查看火墙状态</span></span><br><span class="line">systemctl <span class="built_in">start</span> firewalld     <span class="comment">##开启火墙服务</span></span><br><span class="line">systemctl restart firewalld     <span class="comment">##重启启火墙服务</span></span><br><span class="line">systemctl stop firewalld      <span class="comment">##关闭火墙服务</span></span><br><span class="line">systemctl enable firewalld     <span class="comment">##开机自动开启</span></span><br><span class="line">systemctl disable firewalld    <span class="comment">##开机不自启</span></span><br><span class="line">systemctl mask firewalld       <span class="comment">##冻结火墙服务</span></span><br><span class="line">systemctl unmask firewalld    <span class="comment">##解冻火墙服务</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--state</span>          <span class="comment">##查看火墙的状态</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-default-zone</span>   <span class="comment">##查看火墙默认的域</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-active-zone</span>    <span class="comment">##查看火墙活动的域</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-zones</span>          <span class="comment">##查看火墙所有可用的域</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--list-all</span>   <span class="comment">##列出制定域的所有设置</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-services</span>       <span class="comment">##列出所有预设服务</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--list-all</span>            <span class="comment">##列出默认区域的设置</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--list-all-zones</span>      <span class="comment">##列出所有区域的设置</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--set-default-zone</span>=dmz   <span class="comment">##设置默认区域为dmz</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-source</span>=<span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">--zone</span>=trusted   <span class="comment">##添加172.25.254.44到trusted域中去</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-source</span>=<span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">--zone</span>=trusted  <span class="comment">##删除172.25.254.44到trusted域中去</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-interface</span>=eth1 <span class="literal">--zone</span>=public  <span class="comment">##删除public域中的eth1接口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-interface</span>=eth1 <span class="literal">--zone</span>=trusted    <span class="comment">##添加trusted域中一个接口eth1</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-service</span>=http    <span class="comment">##添加http服务到火墙中</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-port</span>=<span class="number">8080</span>/tcp    <span class="comment">##添加端口为8080，协议为tcp的到火墙中</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--add-service</span>=http  <span class="comment">##永久添加http到火墙中</span></span><br><span class="line">**<span class="literal">-permanent</span>参数表示永久生效设置，如果没有指定<span class="literal">-zone</span>参数，则加入默认区域</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--list-ports</span>   <span class="comment">##列出public域中端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--zone</span>=public <span class="literal">--add-port</span>=<span class="number">8080</span>/tcp  <span class="comment">##添加端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--zone</span>=public <span class="literal">--add-port</span>=<span class="number">80</span>/tcp <span class="literal">--permanent</span>   （<span class="literal">--permanent</span>永久生效，没有此参数重启后失效）</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--zone</span>=public <span class="literal">--remove-port</span>=<span class="number">8080</span>/tcp <span class="comment">##删除端口</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-service</span>=ssh <span class="literal">--permanent</span>  <span class="comment">##永久添加ssh服务（添加完后重新加载一下就可以查看了）</span></span><br><span class="line">vim /etc/firewalld/zones/public.xml  <span class="comment">##编写public域的配置文件,可以加服务（本次实验添加lftp）</span></span><br><span class="line">irewall<span class="literal">-cmd</span> <span class="literal">-reload</span>   <span class="comment">##重新加载火墙，不会立即中断当前使用的服务</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--complete-reload</span>  <span class="comment">##重新加载火墙，会立即中断当前正在使用的服务</span></span><br><span class="line"></span><br><span class="line">通过firewall<span class="literal">-cmd</span> 工具，可以使用 <span class="literal">--direct</span>选项再运行时间里增加或移除链。如果不熟悉iptables,使用直接接口非常危险，因为您可能无意间导致火墙被入侵。直接端口模式适用于服务或程序，以便在运行时间内增加特定的火墙规则。直接端口模式添加的规则优先于应用。</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--get-all-rules</span>  <span class="comment">##列出规则</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--add-rule</span> ipv4 <span class="keyword">filter</span> INPUT <span class="number">2</span> <span class="literal">-s</span> <span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">22</span> <span class="literal">-j</span> ACCEPT  <span class="comment">##在filter表中的INPUT链中第二条加入允许接受tcp协议的172.25.254.44的数据包通过端口22（sshd）访问该主机</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--remove-rule</span> ipv4 <span class="keyword">filter</span> INPUT <span class="number">2</span> <span class="literal">-s</span> <span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">22</span> <span class="literal">-j</span> ACCEPT  <span class="comment">##移除</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--direct</span> <span class="literal">--add-rule</span> ipv4 <span class="keyword">filter</span> INPUT <span class="number">2</span> ！ <span class="literal">-s</span> <span class="number">172.25</span>.<span class="number">254.44</span> <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">22</span> <span class="literal">-j</span> ACCEPT <span class="comment">##添加除了44主机以外的任何主机都可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/services | grep ssh  <span class="comment">##查看与ssh有关的服务信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##端口转发（地址伪装）</span></span><br><span class="line"></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-forward-port</span>=port=<span class="number">22</span>:proto=tcp:toport=<span class="number">22</span>:toaddr=<span class="number">172.25</span>.<span class="number">254.44</span> <span class="comment">##别的主机通过22端口访问该主机的时候伪装到172.25.254.44主机上（要开启伪装才可成功）</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--add-masquerade</span>  <span class="comment">##开启伪装</span></span><br><span class="line">firewall<span class="literal">-cmd--reload</span>   <span class="comment">##需要重新加载</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-forward-port</span>=port=<span class="number">22</span>:proto=tcp:toport=<span class="number">22</span>:toaddr=<span class="number">172.25</span>.<span class="number">254.44</span>  <span class="comment">##移除</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--permanent</span> <span class="literal">--remove-masquerade</span> <span class="comment">##关闭伪装</span></span><br><span class="line"><span class="comment">##实现路由功能（连接不同的ip进行地址伪装）</span></span><br><span class="line">在服务器上配两个网卡eth0:<span class="number">172.25</span>.<span class="number">254.144</span> eth1:<span class="number">192.168</span>.<span class="number">0.144</span></span><br><span class="line">客户端：<span class="number">192.168</span>.<span class="number">0.244</span></span><br><span class="line"></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-rich-rule</span>=<span class="string">&quot;rule family=ipv4 source address=172.25.254.144 masquerade&quot;</span>  </span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-masquerade</span>  <span class="comment">##开启伪装</span></span><br><span class="line"></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--get-icmptypes</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=destination<span class="literal">-unreacheable</span>  <span class="comment">##ping的时候显示目的地不可达</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-icmp-block</span>=destination<span class="literal">-unreacheable</span>  <span class="comment">##移除</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=echo_sed</span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=<span class="built_in">echo</span><span class="literal">-request</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--remove-icmp-block</span>=<span class="built_in">echo</span><span class="literal">-request</span></span><br><span class="line">firewall<span class="literal">-cmd</span> <span class="literal">--add-icmp-block</span>=<span class="built_in">echo</span><span class="literal">-request</span> <span class="literal">--timeout</span>=<span class="number">5</span> <span class="comment">##</span></span><br></pre></td></tr></table></figure><h2 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追加</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;content&#x27;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose集合</title>
      <link href="/post/1668779294000.html"/>
      <url>/post/1668779294000.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用的docker-compose"><a href="#常用的docker-compose" class="headerlink" title="常用的docker-compose"></a>常用的docker-compose</h1><h2 id="PostGres"><a href="#PostGres" class="headerlink" title="PostGres"></a>PostGres</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:11.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres_node1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">postgres_123</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1110</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres_data:/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> </span><br><span class="line">  <span class="attr">postgres_data:</span></span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span>                      <span class="comment"># docker文件的版本</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span>                    <span class="comment"># 指定容器镜像就是之前拉取的redis镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-master</span>    <span class="comment"># 给这个镜像起一个别名</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span>                <span class="comment"># privileged 容器内的root拥有真正root权限，否则容器内root只是外部普通用户权限</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>                 <span class="comment"># always:表名开机自启动</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--port</span> <span class="number">6379</span> <span class="string">--requirepass</span> <span class="string">test@dbuser2019</span>  <span class="string">--appendonly</span> <span class="literal">yes</span>   <span class="comment"># 相当于执行一些命令   (--requirepass 指定redis密码  --appendonly yes 这个命令是用于开启redis数据持久化)</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span>                   <span class="comment"># 端口映射,将容器的端口映射到对应宿主机的端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span>                <span class="comment"># 数据卷的映射.因为一旦容器停止了那么里面的数据也没有.所以我们需要把这个数据文件放在外面,然后映射到容器中</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 集群配置</span></span><br><span class="line">  <span class="attr">slave1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-slave-1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">&quot;sleep 2 &amp;&amp; redis-server --slaveof 192.168.1.101 6379 --port 6380  --requirepass test@dbuser2019 --masterauth test@dbuser2019 --/sys/kernel/mm/transparent_hugepage/enabled --appendonly yes</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      - 6380:6380</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./data:/data</span></span><br><span class="line"><span class="string">      - $PWD/data/redis.conf:/redis.conf</span></span><br><span class="line"><span class="string">      - /etc/sysctl.conf:/sysctl.conf</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  slave2:</span></span><br><span class="line"><span class="string">    image: redis</span></span><br><span class="line"><span class="string">    container_name: redis-slave-2</span></span><br><span class="line"><span class="string">    privileged: true</span></span><br><span class="line"><span class="string">    restart: always</span></span><br><span class="line"><span class="string">    command: /bin/bash -c &quot;</span><span class="string">sleep</span> <span class="number">2</span> <span class="string">&amp;&amp;</span> <span class="string">redis-server</span> <span class="string">--slaveof</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span> <span class="number">6379</span> <span class="string">--port</span> <span class="number">6381</span>  <span class="string">--requirepass</span> <span class="string">test@dbuser2019</span> <span class="string">--masterauth</span> <span class="string">test@dbuser2019</span> <span class="string">--/sys/kernel/mm/transparent_hugepage/enabled</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6381</span><span class="string">:6381</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/data/redis.conf:/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/sysctl.conf:/sysctl.conf</span></span><br></pre></td></tr></table></figure><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql8:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.16</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="string">--lower_case_table_names=1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=Mysql123$</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_HOST=%</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/mysql/sql/init.sql:/docker-entrypoint-initdb.d/init.sql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/mysql/my.cnf:/etc/mysql/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">swarm_net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">phpmyadmin:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">phpmyadmin:5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">phpmyadmin</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">PMA_ARBITRARY=1</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">swarm_net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> </span><br><span class="line">  <span class="attr">mysql_data:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> </span><br><span class="line">  <span class="attr">swarm_net:</span> </span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/786744873/docker-compose-hub.git">运维一键脚本集合</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 远程Debug</title>
      <link href="/post/cec34e8d.html"/>
      <url>/post/cec34e8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="远程Debug"><a href="#远程Debug" class="headerlink" title="远程Debug"></a>远程Debug</h1><ol><li>pom添加以下配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体参数详解：</p><p>-Xdebug 通知JVM工作在DEBUG模式下；</p><p>-Xrunjdwp 通知JVM使用(Java debug wire protocol)运行调试环境。该参数同时包含了一系列的调试选项；</p><p>**transport **指定了调试数据的传送方式，dt_socket是指用SOCKET模式，另有dt_shmem指用共享内存方式，其中，dt_shmem只适用于Windows平台；</p><p>address 调试服务器的端口号，客户端用来连接服务器的端口号；</p><p>server&#x3D;y&#x2F;n VM 是否需要作为调试服务器执行；</p><p>suspend&#x3D;y&#x2F;n 是否在调试客户端建立连接之后启动 VM；</p><ol start="2"><li><p>项目打包运行</p><p><code>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar demo.jar </code></p></li><li><p>IDEA配置远程DEBUG配置</p><p>IDEA要进行远程DEBUG，需要进行配置；</p><ol><li>启动项下拉，选择 <code>Edit Configurations...</code>编辑配置</li><li>点击<code>+</code>，选择<code>Remote</code>，添加远程DEBUG配置</li><li>添加远程DEBUG配置项，Host和Port，配置后，点击<code>Apply</code>和<code>OK</code>按钮（Host：IP，Prot：5005）</li></ol></li><li><p>选择远程debug启动项，然后点击测试调试按钮启动；</p></li></ol><blockquote><p>如果打的是war包，需要两个步骤：</p><p>将 web 应用部署到 Tomcat 的 webapp 目录下</p><p>修改 Tomcat&#x2F;bin&#x2F;startup.bat 文件，在最前面加上如下代码：</p><p>SET CATALINA_OPTS&#x3D;-server -Xdebug -Xnoagent -Djava.compiler&#x3D;NONE -Xrunjdwp:transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
      <url>/post/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启所有容器</span></span><br><span class="line">docker restart <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-a</span> | awk <span class="string">&#x27;&#123;if (NR&gt;1)&#123;print $1&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl <span class="built_in">start</span> docker</span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker inspect [<span class="type">containesId</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># compose </span></span><br><span class="line">docker<span class="literal">-compose</span> up <span class="literal">-d</span> <span class="comment"># 后台运行</span></span><br><span class="line"><span class="literal">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs [<span class="type">OPTIONS</span>] [<span class="type">containersId</span>] </span><br><span class="line">  <span class="comment"># Options参数</span></span><br><span class="line">  <span class="literal">--details</span>: 显示更多的信息</span><br><span class="line">  <span class="literal">--follow</span>(<span class="operator">-f</span>): 跟踪实时日志</span><br><span class="line">  <span class="literal">--since</span> string: 显示自某个timestamp之后的日志，或相对时间，如<span class="number">40</span>m（即<span class="number">40</span>分钟）</span><br><span class="line">  <span class="literal">--tail</span> string: 从日志末尾显示多少行日志， 默认是all</span><br><span class="line">  <span class="literal">--timestamps</span>(<span class="literal">-t</span>): 显示时间戳</span><br><span class="line">  <span class="literal">--until</span> string: 显示自某个timestamp之前的日志，或相对时间，如<span class="number">40</span>m（即<span class="number">40</span>分钟</span><br><span class="line"><span class="comment"># 查看容器mysql 最近30分钟的日志:</span></span><br><span class="line">docker logs <span class="literal">--since</span> <span class="number">30</span>m mysql</span><br><span class="line"><span class="comment"># 查看容器mysql 某时间之后的日志：</span></span><br><span class="line">docker logs <span class="literal">-t</span> <span class="literal">--since</span>=<span class="string">&quot;2019-11-02T13:23:37&quot;</span> mysql</span><br><span class="line"><span class="comment">#查看容器mysql 某时间段日志：</span></span><br><span class="line">docker logs <span class="literal">-t</span> <span class="literal">--since</span>=<span class="string">&quot;2019-11-02T13:23:37&quot;</span> <span class="literal">--until</span> <span class="string">&quot;2019-11-03T12:23:37&quot;</span> mysql</span><br><span class="line"><span class="literal">------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker exec <span class="literal">-it</span> 容器id bashshell <span class="comment"># 进入容器后开启新的终端</span></span><br><span class="line">docker attach <span class="literal">-it</span> 容器id /bin/bash <span class="comment"># 进入容器运行时终端</span></span><br><span class="line"><span class="comment"># 容器拷贝文件到宿主</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器id:路径 目标路径</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">docker commit <span class="literal">-a</span>=<span class="string">&quot;作者&quot;</span> <span class="literal">-m</span>=<span class="string">&quot;信息&quot;</span> 容器id 镜像名:版本</span><br><span class="line"><span class="comment"># 查看卷</span></span><br><span class="line">docker vlums <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">docker save <span class="literal">-o</span> 导出名称.tar 镜像名称:版本</span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">docker load <span class="literal">-i</span> &#123;name&#125;.tar</span><br><span class="line"><span class="comment">#添加docker用户组</span></span><br><span class="line">sudo groupadd docker </span><br><span class="line"><span class="comment">#将登陆用户加入到docker用户组中</span></span><br><span class="line">sudo gpasswd <span class="literal">-a</span> <span class="variable">$USER</span> docker </span><br><span class="line"><span class="comment">#更新用户组</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>参数配置</p><p>创建容器时忘了添加参数 <code>--restart=always</code> ，当 Docker 重启时，容器未能自动启动，<br><strong>1、Docker 命令修改</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container update --restart=always 容器名字</span><br></pre></td></tr></table></figure><p><strong>2、直接改配置文件</strong></p><p>首先停止容器，不然无法修改配置文件</p><p>配置文件路径为：<code>/var/lib/docker/containers/容器ID</code></p><p>在该目录下找到一个文件 <code>hostconfig.json</code> ，找到该文件中关键字 <code>RestartPolicy</code></p><p>修改前配置：<code>&quot;RestartPolicy&quot;:&#123;&quot;Name&quot;:&quot;no&quot;,&quot;MaximumRetryCount&quot;:0&#125;</code></p><p>修改后配置：<code>&quot;RestartPolicy&quot;:&#123;&quot;Name&quot;:&quot;always&quot;,&quot;MaximumRetryCount&quot;:0&#125;</code></p><p>最后启动容器。</p><h2 id="私库"><a href="#私库" class="headerlink" title="私库"></a>私库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有images</span></span><br><span class="line">http://132.126.123.162:58335/v2/_catalog</span><br><span class="line"><span class="comment"># 获取镜像标签</span></span><br><span class="line">http://132.126.123.162:58335/v2/<span class="variable">$&#123;imageName&#125;</span>/tags/list</span><br><span class="line"><span class="comment"># 获取镜像digest **请求头加 Accept:application/vnd.docker.distribution.manifest.v2+json</span></span><br><span class="line">http://132.126.123.162:58335/v2/<span class="variable">$&#123;imagesName&#125;</span>/manifests/<span class="variable">$&#123;version&#125;</span></span><br><span class="line"><span class="comment"># 删除元数据 DELETE请求</span></span><br><span class="line">http://132.126.123.162:58335/v2/nginx/manifests/<span class="variable">$&#123;digest&#125;</span></span><br><span class="line"><span class="comment"># 彻底清除</span></span><br><span class="line">docker <span class="built_in">exec</span> registry bin/registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA修改Gradle仓库</title>
      <link href="/post/1668778275000.html"/>
      <url>/post/1668778275000.html</url>
      
        <content type="html"><![CDATA[<h2 id="更改默认的仓库位置"><a href="#更改默认的仓库位置" class="headerlink" title="更改默认的仓库位置"></a>更改默认的仓库位置</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增环境变量</span></span><br><span class="line">GRADLE_USER_HOME：仓库地址</span><br><span class="line"><span class="comment"># 在C:\Users\Lee\.m2\setting.xml添加</span></span><br><span class="line">&lt;localRepository&gt;F:\Development\maven\repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot跨域配置</title>
      <link href="/post/SpringBoot%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE.html"/>
      <url>/post/SpringBoot%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot跨域配置"><a href="#SpringBoot跨域配置" class="headerlink" title="SpringBoot跨域配置"></a>SpringBoot跨域配置</h1><h2 id="addCorsMappings存在的问题"><a href="#addCorsMappings存在的问题" class="headerlink" title="addCorsMappings存在的问题"></a>addCorsMappings存在的问题</h2><p>通过一段时间在SpringBoot使用的摸爬滚打，发现网络上的资料通常为统一配置解决跨域问题提供了两种代码，第一种比较短，是通过创建<code>MyWebMvcConfig</code>类实现<code>WebMvcConfigurer</code>接口中的<code>addCorsMappings</code>方法。</p><p>具体的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">        .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">        .maxAge(<span class="number">3600</span>)</span><br><span class="line">        .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为代码较短，作为新手自然也喜欢更加简洁的代码，这在项目开始阶段似乎能够解决问题。</p><p>但是后续如果添加自定义的拦截器（包括Spring security），<code>addCorsMappings</code>方法实现的统一跨域配置就会失效，其原因在于请求经过的先后顺序：</p><blockquote><p>当请求到来时会先进入拦截器中，而不是进入Mapping映射中，所以返回的头信息中并没有配置的跨域信息。浏览器就会报跨域异常。</p></blockquote><h2 id="第二种方法，实现一个CORS拦截器"><a href="#第二种方法，实现一个CORS拦截器" class="headerlink" title="第二种方法，实现一个CORS拦截器"></a>第二种方法，实现一个CORS拦截器</h2><p>既然请求会先进入拦截器中，那么你可以尝试“以毒攻毒”，实现一个CORS拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">//放行任意原始域。放行单个原始域。使用config.addAllowedOrigin(&quot;yourdomain.com&quot;)</span></span><br><span class="line">        config.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//放行哪些请求方式。放行任意请求方式可以使用：config.addAllowedMethod(&quot;*&quot;)</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;HEAD&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PUT&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;DELETE&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PATCH&quot;</span>);</span><br><span class="line">        <span class="comment">//放行任意请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Bean Validation</title>
      <link href="/post/1668780339000.html"/>
      <url>/post/1668780339000.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为null</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为false</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为true</td></tr><tr><td>@DecimalMax</td><td>被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</td></tr><tr><td>@DecimalMin</td><td>被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</td></tr><tr><td>@Digits</td><td>验证 Number 和 String 的构成是否合法</td></tr><tr><td>@Email</td><td>被注释的元素必须为电子邮箱地址</td></tr><tr><td>@Future</td><td>被注释的元素必须为一个将来的日期</td></tr><tr><td>@FutureOrPresent</td><td></td></tr><tr><td>@Max</td><td>被注释的元素必须为数字,值小于等于指定的最大值</td></tr><tr><td>@Min</td><td>被注释的元素必须为数字,值大于等于指定的最小值</td></tr><tr><td>@Negative</td><td>带注释的元素必须是严格的负数（0被认为是无效值。</td></tr><tr><td>@NegativeOrZero</td><td>带注释的元素必须是负数或0</td></tr><tr><td>@NotBlank</td><td>Validate that the annotated string is not {@code null} or empty. The difference to {@code NotEmpty} is that trailing whitespaces are getting ignored</td></tr><tr><td>@NotEmpty</td><td>Asserts that the annotated string, collection, map or array is not {@code null} or empty.</td></tr><tr><td>@Past</td><td>被注释的元素必须为一个过去的日期</td></tr><tr><td>@PastOrPresent</td><td></td></tr><tr><td>@Pattern</td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td>@Positive</td><td>带注释的元素必须是严格正数（0被认为是无效值）</td></tr><tr><td>@PositiveOrZero</td><td>带注释的元素必须是正数或0</td></tr><tr><td>@Size</td><td>被注释的元素大小必须在指定范围中</td></tr></tbody></table><h4 id="注-以上注解生效要配合-Valid使用"><a href="#注-以上注解生效要配合-Valid使用" class="headerlink" title="注 : 以上注解生效要配合@Valid使用"></a>注 : 以上注解生效要配合@Valid使用</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring中文文档</title>
      <link href="/post/Spring%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3.html"/>
      <url>/post/Spring%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下所有文档均包含多个版本，并支持多语言（英文及中文）。</p></blockquote><hr><ul><li><a href="https://www.docs4dev.com/docs/zh/spring-boot/1.5.9.RELEASE/reference/">Spring Boot 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference">Spring Framework 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-cloud/Edgware.SR5/reference">Spring Cloud 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-security/4.2.10.RELEASE/reference">Spring Security 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-session/1.3.4.RELEASE/reference">Spring Session 中文文档</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-amqp/1.7.11.RELEASE/reference">Spring AMQP 中文文档</a></li><li>Spring Data<ul><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-jpa/1.11.18.RELEASE/reference">Spring Data JPA</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-jdbc/1.0.5.RELEASE/reference">Spring Data JDBC</a></li><li><a href="https://links.jianshu.com/go?to=https://www.docs4dev.com/docs/zh/spring-data-redis/1.8.18.RELEASE/reference">Spring Data Redis</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot切换使用undertow容器</title>
      <link href="/post/springboot%E5%88%87%E6%8D%A2%E4%BD%BF%E7%94%A8undertow%E5%AE%B9%E5%99%A8.html"/>
      <url>/post/springboot%E5%88%87%E6%8D%A2%E4%BD%BF%E7%94%A8undertow%E5%AE%B9%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboot切换使用undertow容器"><a href="#springboot切换使用undertow容器" class="headerlink" title="springboot切换使用undertow容器"></a>springboot切换使用undertow容器</h1><p>一、maven引入jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认是使用的tomcat --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- undertow容器支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二、undertow的基本配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#undertow容器配置开始</span></span><br><span class="line"><span class="comment"># 是否打开 undertow 日志，默认为 false</span></span><br><span class="line"><span class="attr">server.undertow.accesslog.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 设置访问日志所在目录</span></span><br><span class="line"><span class="attr">server.undertow.accesslog.dir</span>=<span class="string">logs</span></span><br><span class="line"><span class="comment"># 指定工作者线程的 I/0 线程数，默认为 2 或者 CPU 的个数</span></span><br><span class="line"><span class="attr">server.undertow.threads.io</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 指定工作者线程个数，默认为 I/O 线程个数的 8 倍</span></span><br><span class="line"><span class="attr">server.undertow.threads.worker</span>=<span class="string">256</span></span><br><span class="line"><span class="comment"># 设置 HTTP POST 内容的最大长度，默认不做限制</span></span><br><span class="line"><span class="attr">server.undertow.max-http-post-size</span>=<span class="string">4MB</span></span><br><span class="line"><span class="comment"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理；</span></span><br><span class="line"><span class="attr">server.undertow.buffer-size</span>=<span class="string">1024</span></span><br><span class="line"><span class="comment"># 是否分配的直接内存(NIO直接分配的堆外内存)</span></span><br><span class="line"><span class="attr">server.undertow.direct-buffers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#undertow容器配置结束</span></span><br></pre></td></tr></table></figure><p>其他配置可以先看springboot的autoconfig配置类这块的配置：<br>org.springframework.boot.autoconfigure.web包下的ServerProperties、servlet、embedded的undertowxxx类<br>三、一个特别的报错警告<br>解决使用undertow容器报io.undertow.websockets.jsr -UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used<br>处理：<br>新增一个component注解的类，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UndertowPoolCustomizer</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;UndertowServletWebServerFactory&gt; &#123;&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(UndertowServletWebServerFactory factory)</span> &#123;&lt;!-- --&gt;</span><br><span class="line">        factory.addDeploymentInfoCustomizers(deploymentInfo -&gt; &#123;&lt;!-- --&gt;</span><br><span class="line">            <span class="type">WebSocketDeploymentInfo</span> <span class="variable">webSocketDeploymentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebSocketDeploymentInfo</span>();</span><br><span class="line">            webSocketDeploymentInfo.setBuffers(<span class="keyword">new</span> <span class="title class_">DefaultByteBufferPool</span>(<span class="literal">false</span>, <span class="number">1024</span>));</span><br><span class="line">            deploymentInfo.addServletContextAttribute(<span class="string">&quot;io.undertow.websockets.jsr.WebSocketDeploymentInfo&quot;</span>, webSocketDeploymentInfo);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、验证成功<br>![在这里插入图片描述]<img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688549017631668854900940.png"><a href="https://i2.wp.com/img-blog.csdnimg.cn/20201130155007178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p3cmxqNTI3,size_16,color_FFFFFF,t_70">https://i2.wp.com/img-blog.csdnimg.cn/20201130155007178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p3cmxqNTI3,size_16,color_FFFFFF,t_70</a>)<br>看到Undertow started xxx就是使用undertow容器启动成功了。<br>五、分享感觉<br>网传undertow比tomcat、jetty都快省资源，还是费阻塞nio等等，实际上可能就没有什么感觉。我其实用postman测试了以前的一些接口，感觉接口返回秒回，就是感觉快了。后来运行2天（没有配置undertow，默认配置）有点小卡，然后，早上把配置改成上面的发布，再观察几天试试。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions自动部署博客</title>
      <link href="/post/GitHub%20Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2.html"/>
      <url>/post/GitHub%20Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-Actions-自动部署-Hexo-博客"><a href="#GitHub-Actions-自动部署-Hexo-博客" class="headerlink" title="GitHub Actions 自动部署 Hexo 博客"></a>GitHub Actions 自动部署 Hexo 博客</h1><h2 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h2><h3 id="Hexo代码仓库"><a href="#Hexo代码仓库" class="headerlink" title="Hexo代码仓库"></a><strong>Hexo代码仓库</strong></h3><p><strong>存储Hexo项目源码。</strong></p><p>当Hexo仓库的 **<code>master</code> 有内容 <code>push</code> 进来时（例如：主题文件，文章 md 文件、图片等）， 会触发 GitHub Actions 自动编译并部署到编译后仓库的 <code>master 分支</code>**。</p><h4 id="创建-GitHub-Token"><a href="#创建-GitHub-Token" class="headerlink" title="创建 GitHub Token"></a>创建 GitHub Token</h4><p>创建一个有 <strong>repo</strong> 和 <strong>workflow</strong> 权限的 <a href="https://github.com/settings/tokens/new">GitHub Token</a>。</p><p>将上面生成的 Token 添加到Hexo仓库的 <code>Secrets</code> 里，并将这个新增的 <code>secret</code> 命名为 <code>HEXO_DEPLOY</code> 。</p><p><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688439174311668843916838.png"></p><blockquote><p>新创建的 secret <code>HEXO_DEPLOY</code> 在 Actions 配置文件要用到，需跟配置文件保持一致！</p></blockquote><h4 id="添加-Actions-配置文件"><a href="#添加-Actions-配置文件" class="headerlink" title="添加 Actions 配置文件"></a>添加 Actions 配置文件</h4><ol><li>在你的 Hexo 项目根目录下创建<code>.github</code> 文件夹。</li><li>在<code>.github</code> 文件夹下创建 <code>workflows</code> 文件夹。</li><li>在<code>workflows</code> 文件夹下创建 <code>hexo-deploy.yml</code> 文件。</li></ol><p><code>hexo-deploy.yml</code> 文件的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name: deploying Hexo project to GitHub pages</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master # master 分支有 push 行为时就触发这个 action</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@master</span><br><span class="line"></span><br><span class="line">      - name: Build and Deploy</span><br><span class="line">        uses: theme-keep/hexo-deploy-github-pages-action@master # 使用专门部署 Hexo 到 GitHub pages 的 action</span><br><span class="line">        env:</span><br><span class="line">          PERSONAL_TOKEN: $&#123;&#123; secrets.HEXO_DEPLOY &#125;&#125; # secret 名</span><br><span class="line">          PUBLISH_REPOSITORY: oohmygosh/oohmygosh.github.io # 公共仓库，格式：GitHub 用户名/仓库名</span><br><span class="line">          BRANCH: master # 分支</span><br></pre></td></tr></table></figure><blockquote><p>在上面的配置文件中，使用了 <a href="https://link.juejin.cn/?target=https://github.com/theme-keep">theme-keep</a> 组织封装的 <strong><a href="https://github.com/theme-keep/hexo-deploy-github-pages-action">hexo-deploy-github-pages-action</a></strong> ，是一款专门部署 Hexo 博客到 GitHub pages 的 action，欢迎大家 <a href="https://link.juejin.cn/?target=https://github.com/theme-keep/hexo-deploy-github-pages-action">Star</a> 和 <a href="https://link.juejin.cn/?target=https://github.com/theme-keep/hexo-deploy-github-pages-action">Fork</a></p></blockquote><p><strong>至此，准备工作完毕~</strong></p><h2 id="自动部署触发流程"><a href="#自动部署触发流程" class="headerlink" title="自动部署触发流程"></a>自动部署触发流程</h2><ol><li><strong>你的Hexo仓库出发push之后</strong></li><li><strong>Github Actions 检测到</strong><code>master</code> 分枝有内容 <code>push</code>进来，会自动执行action配置文件的命令，然后把Hexo项目编译成静态页面，然后部署到 <code>xxx.github.io</code>仓库的 <code>master</code>分支</li><li><strong>在Hexo库可以看到你配置的Action</strong><br><img src="https://fastly.jsdelivr.net/gh/oohmygosh/oohmygosh.github.io@master/img/16688439934311668843993270.png"></li></ol><blockquote><p><strong>搭配Hexo后端可以只专注于编写博客了</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
